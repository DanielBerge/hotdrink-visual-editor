{"version":3,"sources":["types.ts","wrappers/ElementsWrapper.tsx","wrappers/AlertWrapper.tsx","wrappers/ConstraintsWrapper.tsx","wrappers/EditorWrapper.tsx","content/VisualEditor/VisualWrapper.tsx","content/VisualEditor/ComponentSocket.tsx","content/VisualEditor/VisualComponent.tsx","content/VisualEditor/VisualConnection.tsx","content/VisualEditor/VisualEditor.tsx","content/CodeEditor.tsx","content/ConstraintEditor.tsx","content/Canvas/useTransformer.ts","content/Canvas/CanvasTransformer.tsx","content/Canvas/CanvasInput.tsx","content/Canvas/CanvasButton.tsx","content/Canvas/CanvasText.tsx","content/Canvas/canvasUtils.ts","content/Canvas/CanvasGrid.tsx","content/Canvas/Constraints/CanvasConstraintRect.tsx","content/Canvas/Constraints/CanvasConstraintArrow.tsx","content/Canvas/Constraints/CanvasConstraintArrows.tsx","content/Canvas/Constraints/CanvasMethodCircle.tsx","content/Canvas/Constraints/CanvasConstraints.tsx","content/Canvas/CanvasCheckbox.tsx","content/Canvas/Canvas.tsx","sides/Column.tsx","sides/Elements.tsx","exports/HTMLBuilder.ts","content/HTMLView.tsx","sides/Properties/Actions.tsx","sides/CancelConfirm.tsx","sides/Constraints.tsx","content/AlertBox.tsx","sides/RoundBox.tsx","sides/Properties/ConstraintProperties.tsx","sides/Properties/ComponentDropDown.tsx","sides/Properties/ElementProperties.tsx","sides/Properties/MethodProperties.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["ElemType","InputType","EditorType","Binding","ElementContext","React","createContext","CurrentContext","ElementsWrapper","props","useState","elements","setElements","undefined","current","setCurrent","Provider","value","addElement","element","updateElement","oldElem","newElem","index","findIndex","elem","id","console","warn","getElementById","find","deleteElement","filter","children","useElements","useContext","AlertContext","AlertWrapper","message","setMessage","error","setError","clearMessages","useAlert","ConstraintContext","NewContext","ConstraintsWrapper","alert","constraints","setConstraints","newConstraint","setNewConstraintValue","newMethod","setNewMethodValue","currentMethod","setCurrentMethod","currentElements","setCurrentElements","setNewConstraint","setNewMethod","getLongestMethodName","methods","reduce","acc","cur","length","updateConstraint","oldConstraint","constraint","fromIds","deleteConstraintsConnected","elementId","includes","some","method","toIds","deleteConstraint","toDelete","newConstraints","createConstraint","selectedElements","e","x","y","width","height","updateMethod","oldMethod","thisConstraint","map","toggleElementToNewConstraint","toggleElementToNewMethod","createMethod","name","every","m","type","VISUAL","code","newMethods","longestMethodName","deleteMethod","cancelNewConstraint","cancelNewMethod","useConstraints","TypeContext","EditorWrapper","setType","useEditor","ComponentContext","ConnectionContext","LibraryContext","ObjectContext","libInput","label","inputs","variable","output","params","codeLine","VisualWrapper","library","freshIndex","lib","codeStr","input","outputs","param","inputConnections","component","forEach","log","fromSocket","replace","dslToLib","libraryComponents","setLibraryComponents","components","setComponents","connections","setConnections","updateComponent","oldComponent","newComponent","newComponents","getComponentById","deleteComponent","newConnections","connection","toSocket","deleteConnection","fromComponentId","toComponentId","toObject","fromObject","object","useVisual","ComponentSocket","socket","setNewConnection","socketYAxisPlacement","radius","fill","onClick","toSocketIndex","fromSocketIndex","text","VisualComponent","draggable","onDragMove","target","divProps","style","pointerEvents","onChange","placeholder","marginLeft","marginTop","shadowColor","shadowBlur","cornerRadius","fontStyle","fontSize","stroke","strokeWidth","sceneFunc","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","VisualConnection","strokeColor","setStrokeColor","fromComponent","toComponent","onMouseEnter","onMouseLeave","points","lineCap","lineJoin","VisualEditor","visual","newConnection","mousePosition","setMousePosition","setFilter","stageRef","useRef","offset","setOffset","useEffect","getBoundingClientRect","outPutElem","upperCaseFirst","Math","random","toString","substring","className","toLowerCase","backgroundColor","onDragEnd","pageX","pageY","ref","onMouseMove","evt","clientX","clientY","CodeEditor","editor","editorRef","dispose","join","defaultLanguage","defaultValue","beforeMount","monaco","EditorOptions","formatOnType","libSource","languages","typescript","javascriptDefaults","addExtraLib","_","CODE","visualJson","onMount","ConstraintEditor","open","onClose","dialogPosition","setDialogPosition","left","top","position","zIndex","onDragStart","onDrag","sort","a","b","compConnections","generateCode","display","useTransformer","isSelected","shapeRef","trRef","nodes","getLayer","batchDraw","CanvasTransformer","rotateEnabled","boundBoxFunc","oldBox","newBox","CanvasInput","onTransform","onTransformEnd","chooseStrokeColor","CanvasButton","align","padding","CanvasText","WIDTH","window","screen","availWidth","HEIGHT","innerHeight","SNAP_SPACE","restrictPlacement","clamp","round","getPoints","from","to","spaceFromEnd","fromX","fromY","toX","toY","fromHeight","toHeight","fromWidth","toWidth","calculatePlacement","side","max","min","abs","CanvasGrid","Array","keys","i","CanvasConstraintRect","selected","onDragConstraintMove","resizeEnabled","borderStrokeWidth","CanvasConstraintArrow","hidden","opacity","CanvasConstraintArrows","setConnection","arrowConnection","setArrowConnection","arrowIds","Set","flat","connectionIds","fromId","fromElem","toId","toElem","CanvasMethodCircle","setOpen","hover","setHover","onMouseOver","fontFamily","CanvasConstraints","CanvasCheckbox","Canvas","onClickElem","found","Error","node","scaleX","scaleY","restrictSize","getStage","key","Input","Button","Text","Checkbox","Column","sideOffset","Elements","generateFreshId","freshId","event","binding","Value","subType","Disabled","InnerText","Checked","HTMLBuilder","html","this","add","str","relativeX","relativeY","includeHotDrink","runJs","json","constraintSystemToJson","defaultConstraintSystem","JSON","stringify","unionIds","bindingType","HTMLView","string","builder","includeHTML","end","ReactDOM","render","dangerouslySetInnerHTML","build","__html","document","Actions","zip","JSZip","includeJS","file","fetch","response","generateAsync","then","content","saveAs","Modal","onBackdropClick","CancelConfirm","onCancel","onConfirm","Constraints","setName","disabled","htmlFor","AlertBox","color","fontWeight","RoundBox","ConstraintProperties","Object","ComponentDropDown","elemKey","lowerCaseFirst","ElementProperties","updateKey","number","parseInt","oldId","replaceAll","updateId","MethodProperties","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","idToValue","Map","valueToId","DOMBind","attribute","unsubscribeHD","subscribe","next","val","hasOwnProperty","setHDValue","set","addEventListener","delete","removeEventListener","unsubscribe","func","eval","Method","indexOf","maskNone","cspec","ConstraintSpec","comp","Component","vars","emplaceVariable","emplaceConstraint","addComponent","update","vs","slice","toUpperCase","num","includeY"],"mappings":"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","file":"static/js/main.fd5d8842.chunk.js","sourcesContent":["export enum ElemType {\n    Input = \"input\",\n    Button = \"button\",\n    Text = \"text\",\n    Checkbox = \"checkbox\",\n}\n\nexport enum InputType {\n    Text = \"text\",\n    Number = \"number\",\n    Date = \"date\",\n}\n\nexport enum EditorType {\n    CODE = \"CODE\",\n    VISUAL = \"VISUAL\",\n}\n\nexport enum Binding {\n    Value = \"value\",\n    Disabled = \"disabled\",\n    InnerText = \"innertext\",\n    Checked = \"checked\",\n}\n\nexport interface Elem {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n    type: ElemType;\n    subType?: undefined | InputType;\n    binding: Binding;\n    value: string;\n    id: string;\n}\n\nexport interface VMethod {\n    id: string;\n    code: string;\n    type: EditorType;\n    toIds: string[];\n    visualJson?: [components: any[], connections: any[]];\n}\n\nexport interface Constraint {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    fromIds: string[];\n    methods: VMethod[];\n}\n\nexport interface Socket {\n    id: string;\n    variable: string;\n}\n\nexport interface Connection {\n    fromComponentId?: string;\n    toComponentId?: string;\n    fromSocketIndex?: number;\n    toSocketIndex?: number;\n    toSocket?: Socket;\n    fromSocket?: Socket;\n}\n\nexport interface VComponent extends LibraryComponent {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    value?: any;\n}\n\nexport interface Param {\n    index: number;\n    name: string;\n    type: string;\n}\n\nexport interface LibraryComponent {\n    id: string;\n    label: string;\n    params?: Param[];\n    inputs?: Socket[];\n    outputs?: Socket[];\n\n    code(inputConnections: Connection[], outputSockets: VComponent): string;\n}\n","import React, {FC, useContext, useState} from \"react\";\nimport {Elem} from \"../types\";\n\nconst ElementContext = React.createContext<any>({})\nconst CurrentContext = React.createContext<any>({});\n\nexport interface ElementsWrapperProps {\n    elements: Elem[];\n    addElement: (element: Elem) => void;\n    updateElement: (oldElem: Elem, newElem: Elem) => Elem;\n    getElementById: (id: string) => Elem | undefined;\n    current: Elem;\n    setCurrent: (element: Elem | undefined) => void;\n    deleteElement: (id: string) => void;\n}\n\nconst ElementsWrapper: FC = (props) => {\n    const [elements, setElements] = useState<Elem[]>([])\n    const [current, setCurrent] = useState(undefined);\n\n    function addElement(element: Elem) {\n        setElements([\n            ...elements, element]\n        )\n    }\n\n    function updateElement(oldElem: Elem, newElem: Elem): Elem {\n        const index = elements.findIndex((elem: Elem) => elem.id === oldElem.id);\n        if (index !== -1) {\n            elements[index] = newElem;\n            setElements(elements);\n        } else {\n            console.warn(\"Could not find element to update\");\n        }\n        return newElem;\n    }\n\n    function getElementById(id: string): Elem | undefined {\n        return elements.find((elem: Elem) => elem.id === id);\n    }\n\n    function deleteElement(id: string) {\n        setElements(elements.filter((elem: Elem) => id !== elem.id));\n    }\n\n    return (\n        <ElementContext.Provider value={{elements, addElement, updateElement, getElementById, deleteElement}}>\n            <CurrentContext.Provider value={{current, setCurrent}}>\n                {props.children}\n            </CurrentContext.Provider>\n        </ElementContext.Provider>\n    )\n}\n\n\nfunction useElements(): ElementsWrapperProps {\n    const {elements, addElement, updateElement, getElementById, deleteElement} = useContext(ElementContext);\n    const {current, setCurrent} = useContext(CurrentContext);\n\n    return {\n        elements,\n        addElement,\n        updateElement,\n        getElementById,\n        current,\n        setCurrent,\n        deleteElement,\n    }\n}\n\nexport {ElementsWrapper, useElements};","import React, {FC, useContext, useState} from \"react\";\n\n\nconst AlertContext = React.createContext<any>({});\n\nexport interface AlertContextProps {\n    message: string;\n    error: string;\n    setMessage: (message: string) => void;\n    setError: (error: string) => void;\n    clearMessages: () => void;\n}\n\n\nconst AlertWrapper: FC = (props) => {\n    const [message, setMessage] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n\n    function clearMessages() {\n        setMessage(\"\");\n        setError(\"\");\n    }\n\n    return (\n        <AlertContext.Provider value={{message, setMessage, error, setError, clearMessages}}>\n            {props.children}\n        </AlertContext.Provider>\n    )\n}\n\nfunction useAlert(): AlertContextProps{\n    const {message, setMessage, error, setError, clearMessages} = useContext(AlertContext);\n\n    return {\n        message,\n        setMessage,\n        error,\n        setError,\n        clearMessages,\n    }\n}\n\nexport {AlertWrapper, useAlert};\n","import React, {FC, useContext, useState} from \"react\";\nimport {Constraint, EditorType, Elem, VMethod} from \"../types\";\nimport {useAlert} from \"./AlertWrapper\";\n\nlet index: number = 0;\nfunction freshId(): string {\n    return `M${++index}`;\n}\n\nconst ConstraintContext = React.createContext<any>({})\nconst NewContext = React.createContext<any>(false);\nconst CurrentContext = React.createContext<any>({});\n\nexport interface ConstraintsWrapperProps {\n    constraints: Constraint[];\n    setConstraints: (constraints: Constraint[]) => void;\n    updateConstraint: (oldConstraint: Constraint, newConstraint: Constraint) => Constraint;\n    newConstraint: boolean;\n    setNewConstraint: (newConstraint: boolean) => void;\n    toggleElementToNewConstraint: (id: string) => void;\n    currentElements: string[];\n    cancelNewConstraint: () => void;\n    createConstraint: (elements: Elem[]) => Constraint;\n    deleteConstraint: (constraint: Constraint | undefined) => void;\n    current: Constraint | undefined;\n    setCurrent: (newConstraint: Constraint | undefined) => void;\n    deleteConstraintsConnected: (elementId: string) => void;\n    newMethod: boolean;\n    setNewMethod: (newMethod: boolean) => void;\n    toggleElementToNewMethod: (id: string) => void;\n    cancelNewMethod: () => void;\n    createMethod: (name: string) => VMethod;\n    currentMethod: VMethod | undefined;\n    setCurrentMethod: (method: VMethod | undefined) => void;\n    updateMethod: (oldMethod: VMethod, newMethod: VMethod, constraint: Constraint) => VMethod;\n    deleteMethod: (method: VMethod) => void;\n}\n\nconst ConstraintsWrapper: FC = (props) => {\n    const alert = useAlert();\n    const [constraints, setConstraints] = useState<Constraint[]>([]);\n    const [newConstraint, setNewConstraintValue] = useState(false);\n    const [newMethod, setNewMethodValue] = useState<boolean>(false);\n    const [current, setCurrent] = useState<Constraint | undefined>(undefined);\n    const [currentMethod, setCurrentMethod] = useState<VMethod | undefined>(undefined);\n    const [currentElements, setCurrentElements] = useState<string[]>([]);\n\n    function setNewConstraint(newConstraint: boolean) {\n        if (newConstraint) {\n            alert.setMessage(\"Click on the elements you want to add a constraint to.\");\n        } else {\n            alert.clearMessages();\n        }\n        setNewConstraintValue(newConstraint);\n    }\n\n    function setNewMethod(newMethod: boolean) {\n        if (newMethod) {\n            alert.setMessage(\"Click on the elements you want to add a method output connection to.\");\n        } else {\n            alert.clearMessages();\n        }\n        setNewMethodValue(newMethod);\n    }\n\n    function cancelNewConstraint() {\n        setCurrentElements([]);\n        setNewConstraint(false);\n    }\n\n    function cancelNewMethod() {\n        setCurrentElements([]);\n        setNewMethod(false);\n    }\n\n    function toggleElementToNewConstraint(id: string) {\n        if (currentElements.includes(id)) {\n            setCurrentElements(currentElements.filter(e => e !== id));\n        } else {\n            setCurrentElements([...currentElements, id]);\n        }\n    }\n\n    function toggleElementToNewMethod(id: string) {\n        if (currentElements.includes(id)) {\n            setCurrentElements(currentElements.filter(e => e !== id));\n        } else {\n            setCurrentElements([...currentElements, id]);\n        }\n    }\n\n    function createMethod(name: string) {\n        if (current) {\n            if (current.methods.some(method => currentElements.every((element) => method.toIds.includes(element)))) {\n                alert.setError(\"A method in the constraint already connects to the selected elements.\");\n                setCurrentElements([]);\n                return;\n            }\n            if (currentElements.length === 0) {\n                alert.setError(\"No elements selected.\");\n                return;\n            }\n            if (current?.methods.some(m => m.id === name)) {\n                alert.setError(\"Method with this name already exists\");\n                return;\n            }\n            if (name.length === 0) {\n                name = freshId();\n            }\n            const newMethod = {\n                id: name,\n                type: EditorType.VISUAL,\n                code: \"\",\n                toIds: currentElements,\n            }\n            setCurrentElements([]);\n            setCurrentMethod(newMethod);\n            setNewMethod(false);\n\n            const newMethods = [...current.methods, newMethod];\n            const longestMethodName = getLongestMethodName(newMethods);\n\n            setCurrent(\n                updateConstraint(current, {\n                    ...current,\n                    methods: newMethods,\n                    width: longestMethodName > 6 ? (longestMethodName - 6) * 7 + 100 : 100,\n                    height: newMethods.length > 3 ? (newMethods.length - 3) * 30 + 100 : 100,\n                })\n            );\n        }\n    }\n\n    function getLongestMethodName(methods: VMethod[]) {\n        return methods.reduce((acc, cur) => {\n            if (cur.id.length > acc) {\n                return cur.id.length;\n            }\n            return acc;\n        }, 0);\n    }\n\n\n    function deleteMethod(method: VMethod) {\n        if (current) {\n            const newMethods = current.methods.filter(m => m.id !== method.id);\n            const longestMethodName = getLongestMethodName(newMethods);\n            updateConstraint(current, {\n                ...current,\n                methods: newMethods,\n                width: longestMethodName > 6 ? (longestMethodName - 6) * 7 + 100 : 100,\n                height: newMethods.length > 3 ? (newMethods.length - 3) * 30 + 100 : 100,\n            });\n            setCurrent(undefined);\n        }\n    }\n\n    function createConstraint(elements: Elem[]) {\n        if (currentElements.length === 0) {\n            alert.setError(\"No elements selected.\");\n            return;\n        }\n        const selectedElements = elements.filter(e => currentElements.includes(e.id));\n        const xPos = selectedElements.reduce((acc, cur) => acc + cur.x, 0) / selectedElements.length;\n        const yPos = selectedElements.reduce((acc, cur) => acc + cur.y, 0) / selectedElements.length;\n\n        const newConstraint: Constraint = {\n            x: xPos,\n            y: yPos,\n            width: 100,\n            height: 100,\n            fromIds: currentElements,\n            methods: [],\n        };\n        setCurrentElements([]);\n        setConstraints([...constraints, newConstraint]);\n        setNewConstraint(false);\n        setCurrent(newConstraint);\n    }\n\n    function updateConstraint(oldConstraint: Constraint, newConstraint: Constraint) {\n        const index = constraints.findIndex((constraint) => constraint.fromIds === oldConstraint.fromIds && constraint.methods === oldConstraint.methods);\n        if (index !== -1) {\n            constraints[index] = newConstraint;\n            setConstraints(constraints);\n        } else {\n            console.warn(\"Could not find constraint to update\");\n        }\n        return newConstraint;\n    }\n\n    function updateMethod(oldMethod: VMethod, newMethod: VMethod, constraint: Constraint) {\n        const index = constraints.findIndex((thisConstraint) => thisConstraint === constraint);\n        if (index !== -1) {\n            constraints[index].methods = constraints[index].methods.map((method) => method.id === oldMethod.id ? newMethod : method);\n            setConstraints(constraints);\n        } else {\n            console.warn(\"Could not find method to update\");\n        }\n        return newMethod;\n    }\n\n    function deleteConstraint(toDelete: Constraint) {\n        const newConstraints = constraints.filter((constraint) => constraint.fromIds !== toDelete.fromIds && constraint.methods !== toDelete.methods);\n        setConstraints(newConstraints);\n        setNewConstraint(false);\n        setNewMethod(false);\n    }\n\n    function deleteConstraintsConnected(elementId: string) {\n        setConstraints(constraints.filter((constraint) => !constraint.fromIds.includes(elementId) && !constraint.methods.some((method) => method.toIds.includes(elementId))));\n    }\n\n    return (\n        <ConstraintContext.Provider\n            value={{\n                constraints,\n                setConstraints,\n                updateConstraint,\n                deleteConstraintsConnected,\n                deleteConstraint,\n                createConstraint\n            }}>\n            <NewContext.Provider value={{newConstraint, setNewConstraint, newMethod, setNewMethod}}>\n                <CurrentContext.Provider value={{\n                    current,\n                    setCurrent,\n                    currentMethod,\n                    setCurrentMethod,\n                    updateMethod,\n                    toggleElementToNewConstraint,\n                    toggleElementToNewMethod,\n                    createMethod,\n                    deleteMethod,\n                    currentElements,\n                    cancelNewConstraint,\n                    cancelNewMethod,\n                }}>\n                    {props.children}\n                </CurrentContext.Provider>\n            </NewContext.Provider>\n        </ConstraintContext.Provider>\n    )\n}\n\nfunction useConstraints(): ConstraintsWrapperProps {\n    const {\n        constraints,\n        setConstraints,\n        updateConstraint,\n        deleteConstraintsConnected,\n        deleteConstraint,\n        createConstraint,\n    } = useContext(ConstraintContext);\n    const {newConstraint, setNewConstraint, newMethod, setNewMethod} = useContext(NewContext);\n    const {\n        current,\n        setCurrent,\n        currentMethod,\n        setCurrentMethod,\n        updateMethod,\n        toggleElementToNewConstraint,\n        toggleElementToNewMethod,\n        currentElements,\n        cancelNewConstraint,\n        cancelNewMethod,\n        createMethod,\n        deleteMethod,\n    } = useContext(CurrentContext);\n\n    return {\n        constraints,\n        setConstraints,\n        updateConstraint,\n        newConstraint,\n        setNewConstraint,\n        deleteConstraint,\n        current,\n        setCurrent,\n        deleteConstraintsConnected,\n        currentMethod,\n        setCurrentMethod,\n        updateMethod,\n        createConstraint,\n        currentElements,\n        toggleElementToNewConstraint,\n        cancelNewConstraint,\n        cancelNewMethod,\n        newMethod,\n        setNewMethod,\n        toggleElementToNewMethod,\n        createMethod,\n        deleteMethod,\n    }\n}\n\nexport {ConstraintsWrapper, useConstraints};","import React, {FC, useContext, useState} from \"react\";\nimport {EditorType} from \"../types\";\n\n\nconst TypeContext = React.createContext<any>({});\n\nexport interface EditorWrapperProps {\n    type: EditorType;\n    setType: (type: EditorType) => void;\n}\n\n\nconst EditorWrapper: FC = (props) => {\n    const [type, setType] = useState(EditorType.VISUAL);\n\n    return (\n        <TypeContext.Provider value={{type, setType}}>\n            {props.children}\n        </TypeContext.Provider>\n    )\n}\n\nfunction useEditor(): EditorWrapperProps {\n    const {type, setType} = useContext(TypeContext);\n\n    return {\n        type,\n        setType,\n    }\n}\n\nexport {EditorWrapper, useEditor};","import React, {FC, useContext, useState} from \"react\";\nimport {Connection, LibraryComponent, VComponent} from \"../../types\";\n\nconst ComponentContext = React.createContext<any>({})\nconst ConnectionContext = React.createContext<any>({})\nconst LibraryContext = React.createContext<any>({})\nconst ObjectContext = React.createContext<any>({})\n\nconst libInput = [{\n    label: \"AddWith\",inputs:[{variable: \"num\"}],output: \"AddWith\", params: [{name: \"textBox\", type: \"number\"}],codeLine: \"num + textBox\"}, {\n    label: \"Add\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"Add\", params: [],codeLine: \"num1 + num2\"}, {\n    label: \"DivWith\",inputs:[{variable: \"dividend\"}],output: \"DivWith\", params: [{name: \"divisor\", type: \"number\"}],codeLine: \"dividend + divisor\"}, {\n    label: \"Division\",inputs:[{variable: \"divisor\"}, {variable: \"dividend\"}],output: \"Division\", params: [],codeLine: \"dividend / divisor\"}, {\n    label: \"SubtractWith\",inputs:[{variable: \"num1\"}],output: \"SubtractWith\", params: [{name: \"num2\", type: \"number\"}],codeLine: \"num1 - num2\"}, {\n    label: \"Subtract\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"Subtract\", params: [],codeLine: \"num1 - num2\"}, {\n    label: \"MultWith\",inputs:[{variable: \"num1\"}],output: \"MultWith\", params: [{name: \"multiplier\", type: \"number\"}],codeLine: \"num1 * multiplier\"}, {\n    label: \"Multiplication\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"Multiplication\", params: [],codeLine: \"num1 * num2\"}, {\n    label: \"ModWith\",inputs:[{variable: \"dividend\"}],output: \"ModWith\", params: [{name: \"divisor\", type: \"number\"}],codeLine: \"dividend % divisor\"}, {\n    label: \"Modulo\",inputs:[{variable: \"divisor\"}, {variable: \"dividend\"}],output: \"Modulo\", params: [],codeLine: \"dividend % divisor\"}, {\n    label: \"LessThan\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"LessThan\", params: [],codeLine: \"num1 < num2\"}, {\n    label: \"MoreThan\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"MoreThan\", params: [],codeLine: \"num1 > num2\"}, {\n    label: \"LessOrEqual\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"LessOrEqual\", params: [],codeLine: \"num1 <= num2\"}, {\n    label: \"MoreOrEqual\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"MoreOrEqual\", params: [],codeLine: \"num1 >= num2\"}, {\n    label: \"IsPositive\",inputs:[{variable: \"num\"}],output: \"IsPositive\", params: [],codeLine: \"num > 0\"}, {\n    label: \"IsNegative\",inputs:[{variable: \"num\"}],output: \"IsNegative\", params: [],codeLine: \"num < 0\"}, {\n    label: \"IsZero\",inputs:[{variable: \"num\"}],output: \"IsZero\", params: [],codeLine: \"num === 0\"}, {\n    label: \"IsOdd\",inputs:[{variable: \"num\"}],output: \"IsOdd\", params: [],codeLine: \"num % 2 === 1\"}, {\n    label: \"IsEven\",inputs:[{variable: \"num\"}],output: \"IsEven\", params: [],codeLine: \"num % 2 === 0\"}, {\n    label: \"Min\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"Min\", params: [],codeLine: \"Math.min(num1, num2)\"}, {\n    label: \"Max\",inputs:[{variable: \"num1\"}, {variable: \"num2\"}],output: \"Max\", params: [],codeLine: \"Math.max(num1, num2)\"}, {\n    label: \"Length\",inputs:[{variable: \"str\"}],output: \"Length\", params: [],codeLine: \"str.length\"}, {\n    label: \"Concat\",inputs:[{variable: \"str\"}],output: \"Concat\", params: [],codeLine: \"textBox.concat(str)\"}, {\n    label: \"Contains\",inputs:[{variable: \"str\"}],output: \"Contains\", params: [{name: \"textBox\", type: \"text\"}],codeLine: \"str.contains(textBox)\"}, {\n    label: \"ToLowerCase\",inputs:[{variable: \"str\"}],output: \"ToLowerCase\", params: [],codeLine: \"str.toLowerCase()\"}, {\n    label: \"ToUpperCase\",inputs:[{variable: \"str\"}],output: \"ToUpperCase\", params: [],codeLine: \"str.toUpperCase()\"}, {\n    label: \"IsEmpty\",inputs:[{variable: \"str\"}],output: \"IsEmpty\", params: [],codeLine: \"str === \\\"\\\" || str === undefined\"}, {\n    label: \"And\",inputs:[{variable: \"bool1\"}, {variable: \"bool2\"}],output: \"And\", params: [],codeLine: \"(bool1 === \\\"true\\\") && (bool2 === \\\"true\\\")\"}, {\n    label: \"Or\",inputs:[{variable: \"bool1\"}, {variable: \"bool2\"}],output: \"Or\", params: [],codeLine: \"(bool1 === \\\"true\\\") || (bool2 === \\\"true\\\")\"}, {\n    label: \"Not\",inputs:[{variable: \"bool\"}],output: \"Not\", params: [],codeLine: \"!bool\"}, {\n    label: \"IsTrue\",inputs:[{variable: \"bool\"}],output: \"IsTrue\", params: [],codeLine: \"bool === \\\"true\\\"\"}, {\n    label: \"IsFalse\",inputs:[{variable: \"bool\"}],output: \"IsFalse\", params: [],codeLine: \"bool === \\\"false\\\"\"}, {\n    label: \"IsBefore\",inputs:[{variable: \"time\"}],output: \"IsBefore\", params: [{name: \"timeBox\", type: \"date\"}],codeLine: \"new Date(time).getTime() < new Date(timeBox).getTime()\"}, {\n    label: \"IsAfter\",inputs:[{variable: \"time\"}],output: \"IsAfter\", params: [{name: \"timeBox\", type: \"date\"}],codeLine: \"new Date(time).getTime() > new Date(timeBox).getTime()\"}]\n\nfunction dslToLib(library: any): LibraryComponent[] {\n    let freshIndex = 0;\n    return library.map((lib: any) => {\n        let codeStr: string = lib.codeLine;\n        lib.inputs = lib.inputs.map((input: any, index: number) => {\n            return {\n                id: index,\n                variable: input.variable,\n            }\n        })\n        lib.outputs = [{\n            id: 0,\n            variable: lib.output,\n        }]\n        lib.params = lib.params.map((param: any, index: number) => {\n            return {\n                id: index,\n                name: param.name,\n                type: param.type,\n            }\n        })\n        lib.id = \"lib-\" + freshIndex++;\n        lib.code = (inputConnections: Connection[], component: VComponent) => {\n            lib.inputs.forEach((input: any, index: number) => {\n                console.log(input.variable);\n                console.log(inputConnections[index]?.fromSocket?.variable);\n                codeStr = codeStr.replace(input.variable, inputConnections[index]?.fromSocket?.variable ?? input.variable);\n            })\n            if (inputConnections.length >= 1 && component.outputs?.length === 1) {\n                return `const ${component.outputs[0].variable} = ${codeStr}\\n`\n            }\n            return \"\";\n        }\n        return lib;\n    });\n}\n\nexport interface Visual {\n    libraryComponents: LibraryComponent[];\n    setLibraryComponents: (libraryComponents: LibraryComponent[]) => void;\n    components: VComponent[],\n    setComponents: (components: VComponent[]) => void,\n    updateComponent: (oldComponent: VComponent, newComponent: VComponent) => void,\n    deleteComponent: (component: VComponent) => void,\n    connections: Connection[],\n    setConnections: (connections: Connection[]) => void,\n    deleteConnection: (connection: Connection) => void,\n    getComponentById: (id: string) => VComponent,\n    toObject: () => [components: VComponent[], connections: Connection[]],\n    fromObject: (object: [components: VComponent[], connections: Connection[]] | undefined) => void,\n}\n\nexport const VisualWrapper: FC = (props) => {\n    const [libraryComponents, setLibraryComponents] = useState<LibraryComponent[]>(dslToLib(libInput));\n    const [components, setComponents] = useState<VComponent[]>([]);\n    const [connections, setConnections] = useState<Connection[]>([]);\n\n    function toObject(): [components: VComponent[], connections: Connection[]] {\n        return [\n            components,\n            connections\n        ]\n    }\n\n    function fromObject(object: [components: VComponent[], connections: Connection[]]): void {\n        if (object) {\n            setComponents(object[0]);\n            setConnections(object[1]);\n        } else {\n            setComponents([]);\n            setConnections([]);\n        }\n    }\n\n    function updateComponent(oldComponent: VComponent, newComponent: VComponent) {\n        const index = components.findIndex(component => component.id === oldComponent.id);\n        const newComponents = [...components];\n        newComponents[index] = newComponent;\n        setComponents(newComponents);\n    }\n\n    function deleteComponent(toDelete: VComponent) {\n        const newComponents = components.filter(component => toDelete.id !== component.id);\n        const newConnections = connections.filter(connection => toDelete.id !== connection.fromSocket?.id && toDelete.id !== connection.toSocket?.id);\n        setComponents(newComponents);\n        setConnections(newConnections);\n    }\n\n    function deleteConnection(toDelete: Connection) {\n        const newConnections = connections.filter(connection => toDelete.fromComponentId !== connection.fromComponentId && toDelete.toComponentId !== connection.toComponentId);\n        setConnections(newConnections);\n    }\n\n    function getComponentById(id: string): VComponent | undefined {\n        return components.find(component => component.id === id);\n    }\n\n    return (\n        <ComponentContext.Provider\n            value={{components, setComponents, updateComponent, getComponentById, deleteComponent}}>\n            <ConnectionContext.Provider value={{connections, setConnections, deleteConnection}}>\n                <LibraryContext.Provider value={{libraryComponents, setLibraryComponents}}>\n                    <ObjectContext.Provider value={{toObject, fromObject}}>\n                        {props.children}\n                    </ObjectContext.Provider>\n                </LibraryContext.Provider>\n            </ConnectionContext.Provider>\n        </ComponentContext.Provider>\n    )\n}\n\nexport function useVisual(): Visual {\n    const {libraryComponents, setLibraryComponents} = useContext(LibraryContext);\n    const {\n        components,\n        setComponents,\n        updateComponent,\n        getComponentById,\n        deleteComponent\n    } = useContext(ComponentContext);\n    const {connections, setConnections, deleteConnection} = useContext(ConnectionContext);\n    const {toObject, fromObject} = useContext(ObjectContext);\n\n    return {\n        libraryComponents,\n        setLibraryComponents,\n        components,\n        setComponents,\n        updateComponent,\n        deleteComponent,\n        connections,\n        setConnections,\n        deleteConnection,\n        getComponentById,\n        toObject,\n        fromObject,\n    }\n}","import {Circle, Text} from \"react-konva\";\nimport {FC} from \"react\";\nimport {Connection, Socket, VComponent} from \"../../types\";\nimport {socketYAxisPlacement} from \"../../utils\";\n\nconst labelPadding = 15;\n\ninterface Props {\n    component: VComponent;\n    socket: Socket;\n    index: number;\n    output: boolean;\n    connection: Connection | null;\n    setNewConnection: (connection: Connection | null) => void;\n}\n\nexport const ComponentSocket: FC<Props> = ({component, socket, index, output, setNewConnection, connection}) => {\n    return (\n        <>\n            <Circle\n                x={output ? component.width : 0}\n                y={socketYAxisPlacement(component, index, output ? component.outputs?.length : component.inputs?.length)}\n                radius={10}\n                fill=\"#EF4444\"\n                onClick={() => {\n                    if (connection?.fromComponentId === component.id) {\n                        setNewConnection(null);\n                    } else if (connection?.fromComponentId && !output) {\n                        setNewConnection(\n                            {\n                                ...connection,\n                                toComponentId: component.id,\n                                toSocketIndex: index,\n                                toSocket: socket,\n                            }\n                        )\n                    } else if (output) {\n                        setNewConnection(\n                            {\n                                ...connection,\n                                fromComponentId: component.id,\n                                fromSocketIndex: index,\n                                fromSocket: socket,\n                            }\n                        )\n                    }\n                }}\n            />\n            <Text\n                text={socket.variable}\n                x={output ? component.width + labelPadding : labelPadding}\n                y={socketYAxisPlacement(component, index, output ? component.outputs?.length : component.inputs?.length) - 5}\n            />\n        </>\n    )\n}","import {Connection, Socket, VComponent} from \"../../types\";\nimport {ChangeEvent, FC} from \"react\";\nimport {Group, Rect, Shape, Text} from \"react-konva\";\nimport Konva from \"konva\";\nimport {ComponentSocket} from \"./ComponentSocket\";\nimport {Html} from \"react-konva-utils\";\n\ninterface Props {\n    component: VComponent;\n    updateComponent: (oldComponent: VComponent, newComponent: VComponent) => void;\n    deleteComponent: (component: VComponent) => void;\n    setNewConnection: (connection: Connection | null) => void;\n    connection: Connection | null;\n}\n\n\nexport const VisualComponent: FC<Props> = ({\n                                               component,\n                                               updateComponent,\n                                               deleteComponent,\n                                               setNewConnection,\n                                               connection\n                                           }) => {\n    function onDragMove(e: Konva.KonvaEventObject<DragEvent>) {\n        updateComponent(component, {\n            ...component,\n            x: e.target.x(),\n            y: e.target.y(),\n        })\n    }\n\n    function onValueChange(e: ChangeEvent<HTMLInputElement>) {\n        updateComponent(component, {\n            ...component,\n            value: e.target.value,\n        })\n    }\n    return (\n        <Group\n            x={component.x}\n            y={component.y}\n            draggable\n            onDragMove={onDragMove}\n        >\n            {component.params && component.params.length > 0 && component.inputs?.length === 1 &&\n                <Html\n                    divProps={{style: {pointerEvents: 'none'}}}\n                    children={<input\n                        value={component.value}\n                        onChange={onValueChange}\n                        placeholder={component.params[0]?.name}\n                        type={component.params[0]?.type}\n                        style={{width: 100, marginLeft: component.width / 4, marginTop: component.height / 2, pointerEvents: 'all'}}\n                    />}\n                />}\n            <Rect\n                width={component.width}\n                height={component.height}\n                fill=\"white\"\n                shadowColor={'gray'}\n                shadowBlur={2}\n                cornerRadius={10}\n            />\n            <Group>\n                <Text\n                    x={10}\n                    y={10}\n                    fill={'gray'}\n                    fontStyle={'bold'}\n                    text={component.label}\n                    fontSize={20}\n                />\n                {component.inputs?.map((input: Socket, index) => {\n                    return <ComponentSocket\n                        key={index}\n                        component={component}\n                        socket={input}\n                        index={index}\n                        output={false}\n                        setNewConnection={setNewConnection}\n                        connection={connection}\n                    />\n                })}\n                {component.outputs?.map((output: Socket, index) => {\n                    return <ComponentSocket\n                        key={index}\n                        component={component}\n                        socket={output}\n                        index={index}\n                        output={true}\n                        setNewConnection={setNewConnection}\n                        connection={connection}\n                    />\n                })}\n            </Group>\n            <Shape\n                x={component.width}\n                y={0}\n                fill={\"red\"}\n                stroke={\"red\"}\n                strokeWidth={5}\n                sceneFunc={(context, shape) => {\n                    context.beginPath();\n                    context.moveTo(0, 0);\n                    context.lineTo(-10, 10);\n                    context.moveTo(-10, 0);\n                    context.lineTo(0, 10);\n                    context.closePath();\n                    context.fillStrokeShape(shape);\n                }}\n                onClick={() => {\n                    deleteComponent(component);\n                }}\n            />\n        </Group>\n    )\n}","import {FC, useState} from \"react\";\nimport {Line} from \"react-konva\";\nimport {Connection, VComponent} from \"../../types\";\nimport {socketYAxisPlacement} from \"../../utils\";\n\ninterface Props {\n    connection: Connection;\n    getComponentById: (id: string) => VComponent;\n    deleteConnection: (connection: Connection) => void;\n}\n\nexport const VisualConnection: FC<Props> = ({connection, getComponentById, deleteConnection}) => {\n    const [strokeColor, setStrokeColor] = useState(\"black\");\n    const fromComponent = getComponentById(connection.fromComponentId ?? \"\");\n    const toComponent = getComponentById(connection.toComponentId ?? \"\");\n    if (fromComponent === undefined || toComponent === undefined) {\n        return null;\n    }\n    return (\n        <Line\n            onMouseEnter={() => {\n                setStrokeColor(\"red\");\n            }}\n            onMouseLeave={() => {\n                setStrokeColor(\"black\");\n            }}\n            onClick={() => {\n                deleteConnection(connection);\n            }}\n            points={[\n                fromComponent.x + fromComponent.width,\n                socketYAxisPlacement(fromComponent, connection.fromSocketIndex ?? 0, fromComponent.outputs?.length, true),\n                toComponent.x,\n                socketYAxisPlacement(toComponent, connection.toSocketIndex ?? 0, toComponent.inputs?.length, true),\n            ]}\n            stroke={strokeColor}\n            strokeWidth={5}\n            lineCap=\"round\"\n            lineJoin=\"round\"\n        />\n    )\n}","import {Layer, Line, Stage} from \"react-konva\"\nimport {VisualComponent} from \"./VisualComponent\";\nimport {useVisual} from \"./VisualWrapper\";\nimport {VisualConnection} from \"./VisualConnection\";\nimport React, {useEffect, useState} from \"react\";\nimport {Connection, LibraryComponent} from \"../../types\";\nimport {socketYAxisPlacement, upperCaseFirst} from \"../../utils\";\nimport {useConstraints} from \"../../wrappers/ConstraintsWrapper\";\nimport {useElements} from \"../../wrappers/ElementsWrapper\";\nimport {KonvaEventObject} from \"konva/lib/Node\";\n\nconst componentWidth = 150;\nconst componentHeight = 150;\n\nexport const VisualEditor = () => {\n    const visual = useVisual();\n    const [newConnection, setNewConnection] = useState<Connection | null>(null);\n    const [mousePosition, setMousePosition] = useState<{ x: number, y: number } | null>(null);\n    const constraints = useConstraints();\n    const elements = useElements();\n    const [filter, setFilter] = useState<string>(\"\");\n    const stageRef = React.useRef(null);\n    const [offset, setOffset] = useState<{ x: number, y: number }>({x: 0, y: 0});\n\n    function onMouseMove(e: KonvaEventObject<MouseEvent>) {\n        setMousePosition({x: e.evt.clientX - offset.x - 5, y: e.evt.clientY - offset.y - 5});\n    }\n\n    useEffect(() => {\n        if (stageRef.current) {\n            setOffset({\n                // @ts-ignore\n                x: stageRef?.current.getBoundingClientRect().x,\n                // @ts-ignore\n                y: stageRef?.current.getBoundingClientRect().y,\n            });\n        }\n    }, [stageRef]);\n\n    useEffect(() => {\n        if (newConnection?.fromComponentId && newConnection.toComponentId) {\n            visual.setConnections([...visual.connections, newConnection]);\n            setNewConnection(null);\n        }\n    }, [newConnection]);\n\n    useEffect(() => {\n        if (visual.components.length === 0) {\n            const outPutElem = elements.getElementById(constraints.currentMethod?.toIds[0] ?? \"\");\n            visual.setComponents([\n                ...constraints.current?.fromIds.map((id, index) => {\n                    const elem = elements.getElementById(id);\n                    const type = elem?.type ?? \"\";\n                    return ({\n                        id: `${upperCaseFirst(type)}-${id}-${Math.random().toString(36).substring(2, 15)}`,\n                        label: `Input: ${id}`,\n                        x: 100,\n                        y: 200 * index + 20,\n                        width: componentWidth,\n                        height: componentHeight,\n                        outputs: [\n                            {\n                                id: `output-${index}`,\n                                variable: id,\n                                label: `Output: ${id}`,\n                            }\n                        ],\n                        code: (inputConnections: Connection[], component: any) => {\n                            return \"\";\n                        }\n                    })\n                }) ?? [],\n                {\n                    id: `${upperCaseFirst(outPutElem?.type ?? \"\")}-${constraints.currentMethod?.toIds[0]}-${Math.random().toString(36).substring(2, 15)}`,\n                    label: `Output: ${constraints.currentMethod?.toIds[0]}`,\n                    x: 550,\n                    y: 170,\n                    width: componentWidth,\n                    height: componentHeight,\n                    inputs: [\n                        {\n                            id: `input`,\n                            variable: constraints.currentMethod?.toIds[0] ?? \"\",\n                        }\n                    ],\n                    code: (inputConnections: Connection[], component: any) => {\n                        if (inputConnections.length === 1) {\n                            return `return ${inputConnections[0].fromSocket?.variable ?? \"\"};\\n`;\n                        }\n                        return \"\";\n                    }\n                } ?? [],\n            ]);\n        }\n    }, [visual.components]);\n\n    return (\n        <div className=\"flex flex-row\">\n            <div className=\"w-60 bg-gray p-3\">\n                <label>Search: </label>\n                <input\n                    className=\"border border-black w-32\"\n                    onChange={(e) => setFilter(e.target.value)}\n                />\n                <div className=\"overflow-y-scroll\" style={{\n                    height: \"500px\"\n                }}>\n                    {visual.libraryComponents.filter((component) => component.label.toLowerCase().includes(filter.toLowerCase())).map((component: LibraryComponent) => {\n                        return (\n                            <div\n                                key={component.id}\n                                style={{width: \"100\", height: \"100\", backgroundColor: \"white\"}}\n                                className=\"border shadow p-4 m-4 h-32 rounded-lg font-bold\"\n                                draggable\n                                onDragEnd={(e) => {\n                                    visual.setComponents([...visual.components, {\n                                        ...component,\n                                        id: component.id + Math.random().toString(36).substring(2, 15),\n                                        width: componentWidth,\n                                        height: componentHeight,\n                                        x: e.pageX - 400,\n                                        y: e.pageY - 200,\n                                    }]);\n                                }}\n                            >\n                                {component.label}\n                                <div\n                                    className={\"font-light\"}\n                                >\n                                    {\"\\nInputs:\" + component.inputs?.length}\n                                    {\"\\nOutputs:\" + component.outputs?.length}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            <div\n                // @ts-ignore\n                ref={(ref) => stageRef.current = ref}\n            >\n                <Stage\n                    width={750}\n                    height={500}\n                    className=\"bg-gray-100\"\n                    onMouseMove={onMouseMove}\n                >\n                    <Layer>\n                        {visual.components.map((component) => {\n                            return (\n                                <VisualComponent\n                                    key={component.id}\n                                    component={component}\n                                    updateComponent={visual.updateComponent}\n                                    deleteComponent={visual.deleteComponent}\n                                    setNewConnection={setNewConnection}\n                                    connection={newConnection}\n                                />\n                            )\n                        })}\n                    </Layer>\n                    <Layer>\n                        {visual.connections.map((connection, index) => {\n                            return (\n                                <VisualConnection\n                                    key={index}\n                                    connection={connection}\n                                    getComponentById={visual.getComponentById}\n                                    deleteConnection={visual.deleteConnection}\n                                />\n                            )\n                        })}\n                        {newConnection && <Line\n                            points={[\n                                visual.getComponentById(newConnection.fromComponentId ?? \"\")?.x + visual.getComponentById(newConnection.fromComponentId ?? \"\")?.width ?? 0,\n                                socketYAxisPlacement(visual.getComponentById(newConnection.fromComponentId ?? \"\"), newConnection.fromSocketIndex!, visual.getComponentById(newConnection.fromComponentId ?? \"\")?.outputs?.length, true),\n                                mousePosition!.x,\n                                mousePosition!.y,\n                            ]}\n                            strokeWidth={6}\n                            stroke=\"black\"\n                            lineCap=\"round\"\n                            lineJoin=\"round\"\n                        />}\n                    </Layer>\n                </Stage>\n            </div>\n        </div>\n    )\n}","import Editor, {Monaco} from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport {useEffect, useRef} from \"react\";\nimport {useConstraints} from \"../wrappers/ConstraintsWrapper\";\nimport {useEditor} from \"../wrappers/EditorWrapper\";\nimport {EditorType} from \"../types\";\n\nexport const CodeEditor = () => {\n    const constraints = useConstraints();\n    const editor = useEditor();\n    const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n\n    useEffect(() => {\n        return () => {\n            editorRef.current?.dispose();\n        };\n    }, [editorRef]);\n\n\n    function handleBeforeMount(monaco: Monaco) {\n        monaco.editor.EditorOptions.formatOnType.defaultValue = true;\n        const libSource = `\n        ${constraints.current?.fromIds.map((id) => `declare var ${id}: any;`).join(\"\\n\")}\n        `\n        const libUri = 'ts:filename/inputs.d.ts';\n        monaco.languages.typescript.javascriptDefaults.addExtraLib(libSource, libUri);\n    }\n\n    function handleOnMount(editor: monaco.editor.IStandaloneCodeEditor) {\n        editorRef.current = editor;\n    }\n\n    function handleEditorChange(value: string | undefined, _: monaco.editor.IModelContentChangedEvent) {\n        if (constraints.current && constraints.currentMethod && editor.type === EditorType.CODE) {\n            constraints.setCurrentMethod(\n                constraints.updateMethod(constraints.currentMethod, {\n                    ...constraints.currentMethod,\n                    code: value ?? \"\",\n                    type: EditorType.CODE,\n                    visualJson: undefined,\n                }, constraints.current)\n            )\n        }\n    }\n\n    return (\n        <div className=\"flex h-96 flex-col\">\n            <p\n                className=\"p-2\"\n            ><b>Variables in scope:</b> {constraints.current?.fromIds.join(\", \")} <b>Output\n                variables:</b> {constraints.currentMethod?.toIds.join(\", \")}</p>\n            <Editor\n                height=\"100%\"\n                defaultLanguage={\"javascript\"}\n                defaultValue={constraints.currentMethod?.code ?? \"\"}\n                beforeMount={handleBeforeMount}\n                onChange={handleEditorChange}\n                onMount={handleOnMount}\n            />\n        </div>\n    )\n}","import React, {FC, useEffect} from \"react\";\nimport {useEditor} from \"../wrappers/EditorWrapper\";\nimport {Connection, EditorType, VComponent} from \"../types\";\nimport {useConstraints} from \"../wrappers/ConstraintsWrapper\";\nimport {useVisual} from \"./VisualEditor/VisualWrapper\";\nimport {VisualEditor} from \"./VisualEditor/VisualEditor\";\nimport {CodeEditor} from \"./CodeEditor\";\n\ninterface Props {\n    open: boolean;\n    onClose: any;\n}\n\nexport const ConstraintEditor: FC<Props> = ({open, onClose}) => {\n    const constraints = useConstraints();\n    const editor = useEditor();\n    const visual = useVisual();\n\n    const [offset, setOffset] = React.useState({x: 0, y: 0});\n    const [dialogPosition, setDialogPosition] = React.useState<{ x: number, y: number }>({x: 200, y: 200});\n\n\n    function generateCode(components: VComponent[], connections: Connection[]): string {\n        let code = \"\";\n        components.sort((a, b) => {\n            if (a.x < b.x) {\n                return -1;\n            }\n            if (a.x > b.x) {\n                return 1;\n            }\n            return 0;\n        }).forEach((component: VComponent) => {\n            const compConnections = connections.filter((connection: Connection) => {\n                return connection.toComponentId === component.id;\n            });\n            if (compConnections.length > 0) {\n                if (component?.params?.length ?? -1 > 0) {\n                    code += `const ${component.params![0].name} = \"${component.value}\";\\n`;\n                }\n                code += component.code(compConnections, component);\n            }\n        })\n\n        return code;\n    }\n\n    useEffect(() => {\n        editor.setType(constraints.currentMethod?.type ?? EditorType.VISUAL);\n        visual.fromObject(constraints.currentMethod?.visualJson);\n    }, [constraints.currentMethod]);\n\n    return (\n        <>\n            {open && constraints.current &&\n                <div style={{\n                    left: dialogPosition.x,\n                    top: dialogPosition.y,\n                    width: \"1000px\",\n                    height: \"600px\",\n                    position: \"fixed\",\n                    backgroundColor: \"white\",\n                    zIndex: 1,\n                }}\n                >\n                    <div className=\"bg-white\">\n                        <div className=\"bg-gray-200\"\n                             onDragStart={(e) => {\n                                 setOffset({x: e.clientX - dialogPosition.x, y: e.clientY - dialogPosition.y});\n                             }}\n                             onDrag={(e) => {\n                                 if (e.clientX === 0 && e.clientY === 0) {\n                                     return;\n                                 }\n                                 setDialogPosition({x: e.clientX - offset.x, y: e.clientY - offset.y})\n                             }}\n                        >\n                            <button\n                                className=\"p-5 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                                onClick={() => editor.setType(EditorType.VISUAL)}\n                            >Visual\n                            </button>\n                            <button\n                                className=\"p-5 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                                onClick={() => editor.setType(EditorType.CODE)}>Code\n                            </button>\n                            <button\n                                className=\"p-5 float-right bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                                onClick={() => {\n                                    if (constraints.currentMethod?.type === EditorType.VISUAL) {\n                                        const code = generateCode(visual.components ?? [], visual.connections ?? []);\n                                        console.log(code);\n                                        if (constraints.current && constraints.currentMethod) {\n                                            constraints.updateMethod(constraints.currentMethod, {\n                                                ...constraints.currentMethod,\n                                                code,\n                                                visualJson: visual.toObject()\n                                            }, constraints.current);\n                                        }\n                                        visual.setConnections([]);\n                                        visual.setComponents([]);\n                                        constraints.setCurrent(undefined);\n                                        constraints.setCurrentMethod(undefined);\n                                    }\n                                    onClose();\n                                }}>Save\n                            </button>\n                        </div>\n                        <div\n                            style={editor.type === EditorType.VISUAL ? {} : {display: 'none'}}\n                            className=\"editor bg-white\"\n                        >\n                            <VisualEditor/>\n                        </div>\n                        <div\n                            style={editor.type === EditorType.CODE ? {} : {display: 'none'}}\n                        >\n                            <CodeEditor/>\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}","import React from \"react\";\n\n\nexport function useTransformer(isSelected: boolean): [any, any] {\n    const shapeRef = React.useRef<any>(null);\n    const trRef = React.useRef<any>(null);\n\n    React.useEffect(() => {\n        if (isSelected) {\n            trRef?.current?.nodes([shapeRef.current]);\n            trRef?.current?.getLayer().batchDraw();\n        }\n    }, [isSelected]);\n\n    return [shapeRef, trRef]\n}","import {Transformer} from \"react-konva\";\nimport React, {FC} from \"react\";\n\ninterface Props {\n    trRef: any;\n}\n\nexport const CanvasTransformer: FC<Props> = ({trRef}) => {\n\n    return (\n        <Transformer\n            ref={(ref) => trRef.current = ref}\n            rotateEnabled={false}\n            boundBoxFunc={(oldBox, newBox) => {\n                if (newBox.width < 10 || newBox.height < 10) {\n                    return oldBox;\n                }\n                return newBox;\n            }}\n        />\n    )\n}","import React, {FC} from \"react\";\nimport {Group, Rect} from \"react-konva\";\nimport {useTransformer} from \"./useTransformer\";\nimport {CanvasTransformer} from \"./CanvasTransformer\";\nimport {CanvasElementProps} from \"./CanvasElementProps\";\n\n\nexport const CanvasInput: FC<CanvasElementProps> =\n    ({\n         element,\n         onClick,\n         onDragMove,\n         isSelected,\n         onTransform,\n         onTransformEnd,\n         chooseStrokeColor,\n     }) => {\n        const [shapeRef, trRef] = useTransformer(isSelected);\n\n        return (\n            <>\n                <Group>\n                    <Rect\n                        // @ts-ignore\n                        ref={(ref) => shapeRef.current = ref}\n                        width={element.width}\n                        height={element.height}\n                        draggable\n                        x={element.x}\n                        y={element.y}\n                        fill=\"white\"\n                        stroke={chooseStrokeColor(element)}\n                        strokeWidth={chooseStrokeColor(element) === \"blue\" ? 3 : 1}\n                        cornerRadius={10}\n                        onClick={() => onClick(element)}\n                        onDragMove={(e) => onDragMove(e, element)}\n                        onTransform={(e) => onTransform(e, shapeRef.current)}\n                        onTransformEnd={(e) => onTransformEnd(e, shapeRef.current, element)}\n                    />\n                </Group>\n                {isSelected &&\n                    <CanvasTransformer trRef={trRef}/>\n                }\n            </>\n        )\n    }","import React, {FC} from \"react\";\nimport {Group, Rect, Text} from \"react-konva\";\nimport {useTransformer} from \"./useTransformer\";\nimport {CanvasTransformer} from \"./CanvasTransformer\";\nimport {CanvasElementProps} from \"./CanvasElementProps\";\n\n\nexport const CanvasButton: FC<CanvasElementProps> =\n    ({\n         element,\n         onClick,\n         onDragMove,\n         isSelected,\n         onTransform,\n         onTransformEnd,\n         chooseStrokeColor,\n     }) => {\n        const [shapeRef, trRef] = useTransformer(isSelected);\n\n        return (\n            <>\n                <Group\n                    ref={(ref) => shapeRef.current = ref}\n                    x={element.x}\n                    y={element.y}\n                    draggable\n                    onClick={() => onClick(element)}\n                    onDragMove={(e) => onDragMove(e, element)}\n                >\n                    <Rect\n                        width={element.width}\n                        height={element.height}\n                        fill={chooseStrokeColor(element)}\n                        cornerRadius={10}\n                        onTransform={(e) => onTransform(e, shapeRef.current)}\n                        onTransformEnd={(e) => onTransformEnd(e, shapeRef.current, element)}\n                    />\n                    <Text\n                        text={element.value}\n                        fill=\"white\"\n                        align=\"center\"\n                        width={element.width}\n                        padding={15}\n                        fontSize={16}\n                    />\n                </Group>\n                {isSelected &&\n                    <CanvasTransformer trRef={trRef}/>\n                }\n            </>\n        )\n    }","import React, {FC} from \"react\";\nimport {Text} from \"react-konva\";\nimport {Elem} from \"../../types\";\nimport {KonvaEventObject} from \"konva/lib/Node\";\n\ninterface Props {\n    element: Elem;\n    onClick: (element: Elem) => void;\n    onDragMove: (e: KonvaEventObject<DragEvent>, element: Elem) => void;\n    chooseStrokeColor: (element: Elem) => string;\n}\n\nexport const CanvasText: FC<Props> =\n    ({element, onClick, onDragMove, chooseStrokeColor}) => {\n        return (\n            <Text\n                text={element.value}\n                fill={chooseStrokeColor(element)}\n                align=\"left\"\n                width={element.value.length * 12 + 30}\n                height={element.height}\n                padding={15}\n                fontSize={16}\n                draggable\n                x={element.x}\n                y={element.y}\n                onClick={() => onClick(element)}\n                onDragMove={(e) => onDragMove(e, element)}\n            />\n        )\n    }","import {Constraint, Elem} from \"../../types\";\nimport {clamp} from \"../../utils\";\n\nexport const WIDTH = window.screen.availWidth - 750;\nexport const HEIGHT = window.innerHeight;\nexport const SNAP_SPACE = 10;\n\nexport function restrictPlacement(e: any, elem: Elem) {\n    e.target.x(clamp(e.target.x(), WIDTH - elem.width));\n    e.target.x(Math.round(e.target.x() / SNAP_SPACE) * SNAP_SPACE);\n    e.target.y(clamp(e.target.y(), HEIGHT - elem.height));\n    e.target.y(Math.round(e.target.y() / SNAP_SPACE) * SNAP_SPACE);\n}\n\nexport function restrictSize(e: any) {\n    e.target.width(Math.round(e.target.width() / SNAP_SPACE) * SNAP_SPACE);\n    e.target.height(Math.round(e.target.height() / SNAP_SPACE) * SNAP_SPACE);\n}\n\nexport function getPoints(from: Constraint | Elem, to: Constraint | Elem, spaceFromEnd: number = 8) {\n    let fromX = from.x;\n    let fromY = from.y;\n    let toX = to.x;\n    let toY = to.y;\n    let fromHeight = from.height;\n    let toHeight = to.height;\n    let fromWidth = from.width;\n    let toWidth = to.width;\n\n    function calculatePlacement(side: number, from: number, to: number) {\n        return side / 2 + Math.max(Math.min(side / 2, (from - to) / 2), -side / 2);\n    }\n\n    if (Math.abs(fromX - toX) > Math.abs(fromY - toY)) {\n        if (fromX < toX) {\n            toY += calculatePlacement(toHeight, fromY, toY);\n            fromY += fromHeight / 2;\n            fromX += fromWidth;\n            toX -= spaceFromEnd;\n        } else if (fromX > toX) {\n            toY += calculatePlacement(toHeight, fromY, toY);\n            fromY += fromHeight / 2;\n            toX += toWidth;\n            toX += spaceFromEnd;\n        }\n    } else {\n        if (fromY < toY) {\n            toX += calculatePlacement(toWidth, fromX, toX);\n            fromX += fromWidth / 2;\n            fromY += fromHeight;\n            toY -= spaceFromEnd;\n        } else if (fromY > toY) {\n            toX += calculatePlacement(toWidth, fromX, toX);\n            fromX += fromWidth / 2;\n            toY += toHeight;\n            toY += spaceFromEnd;\n        }\n    }\n\n    return [fromX, fromY, toX, toY]\n}\n","import {Layer, Line} from \"react-konva\";\nimport React, {FC} from \"react\";\nimport {HEIGHT, SNAP_SPACE, WIDTH} from \"./canvasUtils\";\n\n\nexport const CanvasGrid: FC = () => {\n    return (\n        <Layer>\n            {\n                Array.from(Array(HEIGHT).keys()).filter((i) => i % SNAP_SPACE === 0).map((y) => {\n                    return (\n                        <Line\n                            key={y}\n                            points={[0, y, WIDTH, y]}\n                            width={WIDTH}\n                            stroke=\"gray\"\n                            strokeWidth={0.5}\n                        />\n                    )\n                })\n            }\n            {\n                Array.from(Array(WIDTH).keys()).filter((i) => i % SNAP_SPACE === 0).map((x) => {\n                    return (\n                        <Line\n                            key={x}\n                            points={[x, 0, x, HEIGHT]}\n                            width={WIDTH}\n                            stroke=\"gray\"\n                            strokeWidth={0.5}\n                        />\n                    )\n                })\n            }\n        </Layer>\n    )\n}","import React, {FC} from \"react\";\nimport {Rect, Transformer} from \"react-konva\";\nimport {Constraint} from \"../../../types\";\nimport {KonvaEventObject} from \"konva/lib/Node\";\nimport {useTransformer} from \"../useTransformer\";\nimport {ConstraintsWrapperProps} from \"../../../wrappers/ConstraintsWrapper\";\nimport {ElementsWrapperProps} from \"../../../wrappers/ElementsWrapper\";\n\ninterface Props {\n    constraint: Constraint;\n    constraints: ConstraintsWrapperProps;\n    elements: ElementsWrapperProps;\n    onClick: (e: Constraint) => void;\n    selected: boolean;\n}\n\nexport const CanvasConstraintRect: FC<Props> =\n    ({\n         constraints,\n         constraint,\n         elements,\n         onClick,\n         selected\n     }) => {\n        const [shapeRef, trRef] = useTransformer(selected);\n\n        function onDragConstraintMove(e: KonvaEventObject<DragEvent>, constraint: Constraint) {\n            constraints.setCurrent(\n                constraints.updateConstraint(constraint, {\n                    ...constraint,\n                    x: e.target.x(),\n                    y: e.target.y(),\n                })\n            )\n        }\n\n        return (\n            <>\n                <Rect\n                    // @ts-ignore\n                    ref={(ref) => shapeRef.current = ref}\n                    x={constraint.x}\n                    y={constraint.y}\n                    width={constraint.width}\n                    height={constraint.height}\n                    onClick={() => {\n                        constraints.setCurrent(constraint);\n                        constraints.setCurrentMethod(undefined);\n                        elements.setCurrent(undefined);\n                        onClick(constraint);\n                    }}\n                    cornerRadius={50}\n                    fill={\"red\"}\n                    shadowBlur={3}\n                    shadowColor={\"black\"}\n                    onDragMove={(e) => onDragConstraintMove(e, constraint)}\n                    draggable\n                />\n                {selected && <Transformer\n                    // @ts-ignore\n                    ref={(ref) => trRef.current = ref}\n                    rotateEnabled={false}\n                    resizeEnabled={false}\n                    borderStrokeWidth={2}\n                />}\n            </>\n        )\n    }","import {Arrow, Group, Line} from \"react-konva\";\nimport React, {FC} from \"react\";\nimport {ConstraintsWrapperProps} from \"../../../wrappers/ConstraintsWrapper\";\nimport {Constraint} from \"../../../types\";\nimport {ElementsWrapperProps} from \"../../../wrappers/ElementsWrapper\";\n\ninterface Props {\n    id: string;\n    constraints: ConstraintsWrapperProps;\n    constraint: Constraint;\n    elements: ElementsWrapperProps;\n    points: number[];\n    selected: boolean;\n    connection: boolean;\n    hidden: boolean;\n}\n\nexport const CanvasConstraintArrow: FC<Props> = ({\n                                                     id,\n                                                     constraints,\n                                                     constraint,\n                                                     elements,\n                                                     points,\n                                                     connection,\n                                                     hidden,\n                                                     selected\n                                                 }) => {\n\n    function chooseOpacityOneWay() {\n        if (hidden && constraints.currentMethod) {\n            return 0.3;\n        }\n        return (constraints.current && constraints.current === constraint) ? 1 : 0.3;\n    }\n\n    function chooseOpacityTwoWay() {\n        if (hidden && constraints.currentMethod && constraints.current === constraint) {\n            return 0.0;\n        }\n        return (constraints.current && constraints.current === constraint) ? 1 : 0.3;\n    }\n\n    return (\n        <>\n            {connection ? <Line\n                    key={id}\n                    onClick={() => {\n                        constraints.setCurrent(constraint);\n                        elements.setCurrent(undefined);\n                    }}\n                    points={points}\n                    stroke=\"red\"\n                    fill=\"red\"\n                    opacity={chooseOpacityOneWay()}\n                    strokeWidth={5}\n                    shadowBlur={3}\n                    shadowColor={'red'}\n                /> :\n                <Group>\n                    {hidden && constraints.currentMethod && constraints.current === constraint && <Line\n                        points={points}\n                        stroke=\"red\"\n                        fill=\"red\"\n                        opacity={1}\n                        strokeWidth={5}\n                        shadowBlur={3}\n                        shadowColor={'red'}\n                    />}\n                    <Arrow\n                        key={id}\n                        onClick={() => {\n                            constraints.setCurrent(constraint);\n                            elements.setCurrent(undefined);\n                        }}\n                        points={points}\n                        stroke=\"red\"\n                        fill=\"red\"\n                        opacity={chooseOpacityTwoWay()}\n                        strokeWidth={5}\n                        shadowBlur={3}\n                        shadowColor={'red'}\n                    />\n                    {selected && <Line\n                        points={points}\n                        stroke=\"red\"\n                        fill=\"red\"\n                        opacity={1}\n                        strokeWidth={5}\n                        shadowBlur={3}\n                        shadowColor={'red'}\n                    />}\n                </Group>}\n        </>\n    )\n}","import React, {FC, useEffect} from \"react\";\nimport {Constraint} from \"../../../types\";\nimport {ElementsWrapperProps} from \"../../../wrappers/ElementsWrapper\";\nimport {ConstraintsWrapperProps} from \"../../../wrappers/ConstraintsWrapper\";\nimport {CanvasConstraintArrow} from \"./CanvasConstraintArrow\";\nimport {getPoints} from \"../canvasUtils\";\n\ninterface Props {\n    constraint: Constraint;\n    elements: ElementsWrapperProps;\n    constraints: ConstraintsWrapperProps;\n}\n\nexport const CanvasConstraintArrows: FC<Props> = ({constraint, elements, constraints}) => {\n    const [connection, setConnection] = React.useState<string[]>([]);\n    const [arrowConnection, setArrowConnection] = React.useState<string[]>([]);\n\n    useEffect(() => {\n        const arrowIds = Array.from(new Set([...constraint.methods.map((method) => method.toIds).flat()]));\n        const connectionIds = constraint.fromIds.filter((id) =>\n            !constraint.methods.some((method) =>\n                method.toIds.includes(id)));\n        setConnection(connectionIds);\n        setArrowConnection(arrowIds);\n\n    }, [constraint]);\n\n    return (\n        <>\n            {\n                connection.map((fromId: string) => {\n                    const fromElem = elements.getElementById(fromId);\n                    if (fromElem === undefined) {\n                        console.error(`Constraint id, does not have matching canvas element: ${fromId}`)\n                        return null;\n                    }\n                    return (\n                        <CanvasConstraintArrow\n                            key={`From${fromElem.id}`}\n                            id={`From${fromElem.id}`}\n                            constraints={constraints}\n                            constraint={constraint}\n                            points={getPoints(constraint, fromElem, 0)}\n                            elements={elements}\n                            connection={true}\n                            selected={constraints.current === constraint}\n                            hidden={constraints.current !== constraint ?? false}\n                        />\n                    )\n                })\n            }\n            {\n                arrowConnection.map((toId: string) => {\n                    const toElem = elements.getElementById(toId);\n                    if (toElem === undefined) {\n                        console.error(`Constraint id, does not have matching canvas element: ${toId}`)\n                        return null;\n                    }\n                    return (\n                        <CanvasConstraintArrow\n                            key={`To${toElem.id}`}\n                            id={`To${toElem.id}`}\n                            constraints={constraints}\n                            constraint={constraint}\n                            points={getPoints(constraint, toElem)}\n                            elements={elements}\n                            connection={false}\n                            selected={constraints.current === constraint}\n                            hidden={!constraints.currentMethod?.toIds.includes(toElem.id) ?? false}\n                        />\n                    )\n                })\n            }\n        </>\n    )\n}","import React, {FC} from \"react\";\nimport {Group, Rect, Text} from \"react-konva\";\nimport {Constraint, VMethod} from \"../../../types\";\nimport {ConstraintsWrapperProps} from \"../../../wrappers/ConstraintsWrapper\";\nimport {ElementsWrapperProps} from \"../../../wrappers/ElementsWrapper\";\n\ninterface Props {\n    setOpen: (open: boolean) => void;\n    constraint: Constraint;\n    constraints: ConstraintsWrapperProps;\n    elements: ElementsWrapperProps;\n    method: VMethod;\n    index: number;\n    onClick: (element: any) => void;\n}\n\nexport const CanvasMethodCircle: FC<Props> = ({setOpen, constraints, constraint, elements, method, index, onClick}) => {\n    const [hover, setHover] = React.useState(false);\n\n    return (\n        <Group\n            x={constraint.x + constraint.width / 6}\n            y={constraint.y + index * 30 + 10}\n            onClick={() => {\n                if (constraints.newConstraint) {\n                    onClick(method);\n                } else {\n                    setOpen(true)\n                    constraints.setCurrent(constraint);\n                    constraints.setCurrentMethod(method);\n                    elements.setCurrent(undefined);\n                }\n            }}\n            onMouseOver={() => {\n                constraints.setCurrentMethod(method);\n                constraints.setCurrent(constraint);\n                elements.setCurrent(undefined);\n                setHover(true);\n            }}\n            onMouseLeave={() => {\n                setHover(false);\n            }}\n        >\n            <Rect\n                key={method.id}\n                width={constraint.width / 1.5}\n                cornerRadius={20}\n                height={20}\n                fill={hover ? 'grey' : '#fff'}\n                shadowBlur={4}\n                shadowColor={'black'}\n            />\n            <Text\n                text={`${method.id}`}\n                fill={\"black\"}\n                fontFamily={'Open Sans'}\n                x={15}\n                y={5}\n            />\n        </Group>\n    )\n}","import React, {FC} from \"react\";\nimport {Group, Layer} from \"react-konva\";\nimport {Constraint, Elem, VMethod} from \"../../../types\";\nimport {CanvasConstraintRect} from \"./CanvasConstraintRect\";\nimport {ConstraintsWrapperProps} from \"../../../wrappers/ConstraintsWrapper\";\nimport {ElementsWrapperProps} from \"../../../wrappers/ElementsWrapper\";\nimport {CanvasConstraintArrows} from \"./CanvasConstraintArrows\";\nimport {CanvasMethodCircle} from \"./CanvasMethodCircle\";\n\ninterface Props {\n    onClick: (element: Constraint) => void;\n    setOpen: (open: boolean) => void;\n    constraints: ConstraintsWrapperProps;\n    elements: ElementsWrapperProps;\n}\n\nexport const CanvasConstraints: FC<Props> = ({onClick, setOpen, constraints, elements}) => {\n\n    return (\n        <Layer>\n            {constraints.constraints.map((constraint: Constraint, index) => {\n                return (\n                    <Group key={index}>\n                        <CanvasConstraintRect\n                            constraints={constraints}\n                            elements={elements}\n                            onClick={onClick}\n                            constraint={constraint}\n                            selected={constraint === constraints.current}\n                        />\n                        {constraint.methods.map((method, index) => {\n                            return <CanvasMethodCircle\n                                key={index}\n                                setOpen={setOpen}\n                                constraint={constraint}\n                                constraints={constraints}\n                                elements={elements}\n                                method={method}\n                                index={index}\n                                onClick={onClick}\n                            />\n                        })}\n                        <CanvasConstraintArrows constraint={constraint} elements={elements} constraints={constraints}/>\n                    </Group>\n                )\n            })}\n        </Layer>\n    )\n\n}","import {CanvasElementProps} from \"./CanvasElementProps\";\nimport React, {FC} from \"react\";\nimport {useTransformer} from \"./useTransformer\";\nimport {Group, Rect} from \"react-konva\";\nimport {CanvasTransformer} from \"./CanvasTransformer\";\n\n\nexport const CanvasCheckbox: FC<CanvasElementProps> = ({\n         element,\n         onClick,\n         onDragMove,\n         isSelected,\n         onTransform,\n         onTransformEnd,\n         chooseStrokeColor,\n     }) => {\n    const [shapeRef, trRef] = useTransformer(isSelected);\n\n    return (\n        <>\n            <Group>\n                <Rect\n                    // @ts-ignore\n                    ref={(ref) => shapeRef.current = ref}\n                    width={element.width}\n                    height={element.height}\n                    draggable\n                    x={element.x}\n                    y={element.y}\n                    fill=\"white\"\n                    stroke={chooseStrokeColor(element)}\n                    strokeWidth={chooseStrokeColor(element) === \"blue\" ? 3 : 1}\n                    onClick={() => onClick(element)}\n                    onDragMove={(e) => onDragMove(e, element)}\n                    onTransform={(e) => onTransform(e, shapeRef.current)}\n                    onTransformEnd={(e) => onTransformEnd(e, shapeRef.current, element)}\n                />\n            </Group>\n            {isSelected &&\n                <CanvasTransformer trRef={trRef}/>\n            }\n        </>\n    )\n};","import React, {FC, useState} from 'react';\nimport {Layer, Stage} from 'react-konva';\nimport {KonvaEventObject} from \"konva/lib/Node\";\nimport {Constraint, Elem, ElemType} from \"../../types\";\nimport {useElements} from \"../../wrappers/ElementsWrapper\";\nimport {useConstraints} from \"../../wrappers/ConstraintsWrapper\";\nimport {ConstraintEditor} from \"../ConstraintEditor\";\nimport {CanvasInput} from \"./CanvasInput\";\nimport {CanvasButton} from \"./CanvasButton\";\nimport {CanvasText} from \"./CanvasText\";\nimport {VisualWrapper} from '../VisualEditor/VisualWrapper';\nimport {CanvasGrid} from \"./CanvasGrid\";\nimport {CanvasConstraints} from \"./Constraints/CanvasConstraints\";\nimport {HEIGHT, restrictPlacement, restrictSize, WIDTH} from \"./canvasUtils\";\nimport {CanvasCheckbox} from './CanvasCheckbox';\n\nexport const Canvas: FC = () => {\n        const elements = useElements();\n        const constraints = useConstraints();\n\n        const [open, setOpen] = useState(false);\n\n        function onClose() {\n            setOpen(false);\n        }\n\n        function chooseStrokeColor(element: Elem) {\n            if (constraints.currentElements.includes(element.id) && (constraints.newMethod || constraints.newConstraint)) {\n                return 'blue';\n            } else if (constraints.newConstraint || (constraints.newMethod && constraints.current?.fromIds.includes(element.id))) {\n                return 'green';\n            } else {\n                return 'black';\n            }\n        }\n\n        function onClickConstraint(constraint: Constraint) {\n            constraints.setCurrent(constraint);\n            elements.setCurrent(undefined);\n        }\n\n        function onClickElem(element: Elem) {\n            if (constraints.newMethod && constraints.current?.fromIds.includes(element.id)) {\n                constraints.toggleElementToNewConstraint(element.id);\n            } else if (constraints.newConstraint) {\n                constraints.toggleElementToNewConstraint(element.id);\n            } else if (!constraints.newMethod) {\n                elements.setCurrent(element);\n                constraints.setCurrent(undefined);\n            }\n        }\n\n\n        function onDragMove(e: KonvaEventObject<DragEvent>, elem: Elem) {\n            const found = elements.getElementById(elem.id);\n            restrictPlacement(e, elem);\n            if (found) {\n                elements.updateElement(found, {\n                        ...found,\n                        x: e.target.x(),\n                        y: e.target.y(),\n                    }\n                )\n                elements.setCurrent(found);\n            } else {\n                throw new Error(\"Could not find element to move\");\n            }\n        }\n\n        function onTransform(e: KonvaEventObject<Event>, node: any) {\n            // @ts-ignore\n            const scaleX = node?.scaleX();\n            // @ts-ignore\n            const scaleY = node?.scaleY();\n            // @ts-ignore\n            node?.scaleX(1);\n            // @ts-ignore\n            node?.scaleY(1);\n\n            elements.setCurrent(\n                elements.updateElement(elements.current, {\n                        ...elements.current,\n                        x: e.target.x(),\n                        y: e.target.y(),\n                        width: Math.max(e.target.width() * scaleX),\n                        height: Math.max(e.target.height() * scaleY),\n                    }\n                )\n            )\n        }\n\n        function onTransformEnd(e: KonvaEventObject<Event>, node: any, elem: Elem) {\n            restrictSize(e);\n            restrictPlacement(e, elem);\n            onTransform(e, node);\n        }\n\n        const checkDeselect = (e: any) => {\n            const clickedOnEmpty = e.target === e.target.getStage();\n            if (clickedOnEmpty && !open) {\n                elements.setCurrent(undefined);\n                constraints.setCurrent(undefined);\n                constraints.setCurrentMethod(undefined);\n                constraints.cancelNewConstraint();\n                constraints.cancelNewMethod();\n            }\n        };\n\n        return (\n            <div className=\"\">\n                <Stage\n                    width={WIDTH}\n                    height={HEIGHT}\n                    className=\"bg-gray-100\"\n                    onClick={checkDeselect}\n                >\n                    <CanvasGrid/>\n                    <CanvasConstraints\n                        onClick={onClickConstraint}\n                        setOpen={setOpen}\n                        elements={elements}\n                        constraints={constraints}\n                    />\n                    <Layer>\n                        {elements.elements.map((element: Elem, key: number) => {\n                            switch (element.type) {\n                                case ElemType.Input:\n                                    return (\n                                        <CanvasInput\n                                            key={key}\n                                            element={element}\n                                            onClick={onClickElem}\n                                            onDragMove={onDragMove}\n                                            isSelected={element.id === elements.current?.id}\n                                            onTransform={onTransform}\n                                            onTransformEnd={onTransformEnd}\n                                            chooseStrokeColor={chooseStrokeColor}\n                                        />\n                                    )\n                                case ElemType.Button:\n                                    return (\n                                        <CanvasButton\n                                            key={key}\n                                            element={element}\n                                            onClick={onClickElem}\n                                            onDragMove={onDragMove}\n                                            isSelected={element.id === elements.current?.id}\n                                            onTransform={onTransform}\n                                            onTransformEnd={onTransformEnd}\n                                            chooseStrokeColor={chooseStrokeColor}\n                                        />\n                                    )\n                                case ElemType.Text:\n                                    return (\n                                        <CanvasText\n                                            key={key}\n                                            element={element}\n                                            onClick={onClickElem}\n                                            onDragMove={onDragMove}\n                                            chooseStrokeColor={chooseStrokeColor}\n                                        />\n                                    )\n                                case ElemType.Checkbox:\n                                    return (\n                                        <CanvasCheckbox\n                                            key={key}\n                                            element={element}\n                                            onClick={onClickElem}\n                                            onDragMove={onDragMove}\n                                            isSelected={element.id === elements.current?.id}\n                                            onTransform={onTransform}\n                                            onTransformEnd={onTransformEnd}\n                                            chooseStrokeColor={chooseStrokeColor}\n                                        />\n                                    )\n                                default:\n                                    return null;\n                            }\n                        })}\n                    </Layer>\n                </Stage>\n                <VisualWrapper>\n                    <ConstraintEditor\n                        onClose={onClose}\n                        open={open}\n                    />\n                </VisualWrapper>\n            </div>\n        );\n    }\n;","import React, {FC} from \"react\";\n\nexport const Column: FC = (props) => {\n    return (\n        <div className=\"w-96 p-8 bg-gray-100\">\n            {props.children}\n        </div>\n    )\n}\n","import React, {FC} from \"react\";\nimport {freshId} from \"../App\";\nimport {Binding, ElemType, InputType} from \"../types\";\nimport {useElements} from \"../wrappers/ElementsWrapper\";\n\nexport const sideOffset = 450;\n\nexport const Elements: FC = () => {\n    const elements = useElements();\n\n    function generateFreshId(type: ElemType): string {\n        switch (type) {\n            case ElemType.Button:\n                return \"button\" + freshId();\n            case ElemType.Input:\n                return \"input\" + freshId();\n            case ElemType.Text:\n                return \"text\" + freshId();\n            case ElemType.Checkbox:\n                return \"checkbox\" + freshId();\n            default:\n                return \"id\" + freshId();\n        }\n    }\n\n    return (\n        <>\n            <h1 className=\"font-bold text-lg\">\n                Elements\n            </h1>\n            <div\n                draggable\n                className=\"w-24 bg-white border border-black p-3 m-1 rounded\"\n                onDragEnd={(event => {\n                    elements.addElement({\n                        id: generateFreshId(ElemType.Input),\n                        height: 50,\n                        width: 200,\n                        x: event.clientX - sideOffset,\n                        y: event.clientY,\n                        type: ElemType.Input,\n                        binding: Binding.Value,\n                        subType: InputType.Text,\n                        value: \"\",\n                    })\n                })}\n            >Input\n            </div>\n            <div\n                draggable\n                className=\"w-24 bg-white border border-black p-3 m-1 rounded\"\n                onDragEnd={(event => {\n                    elements.addElement({\n                        id: generateFreshId(ElemType.Button),\n                        height: 50,\n                        width: 150,\n                        x: event.clientX - sideOffset,\n                        y: event.clientY,\n                        type: ElemType.Button,\n                        binding: Binding.Disabled,\n                        value: \"Name\",\n                    })\n                })}\n            >Button\n            </div>\n            <div\n                draggable\n                className=\"w-24 text-black p-3 m-1 border border-black rounded\"\n                onDragEnd={(event => {\n                    elements.addElement({\n                        id: generateFreshId(ElemType.Text),\n                        height: 50,\n                        width: 200,\n                        x: event.clientX - sideOffset,\n                        y: event.clientY,\n                        type: ElemType.Text,\n                        binding: Binding.InnerText,\n                        value: \"Textvalue\",\n                    })\n                })}\n            >Text\n            </div>\n            <div\n                draggable\n                className=\"w-24 text-black p-3 m-1 border border-black rounded\"\n                onDragEnd={(event => {\n                    elements.addElement({\n                        id: generateFreshId(ElemType.Checkbox),\n                        height: 30,\n                        width: 30,\n                        x: event.clientX - sideOffset,\n                        y: event.clientY,\n                        type: ElemType.Checkbox,\n                        binding: Binding.Checked,\n                        value: \"false\",\n                    })\n                })}\n            >Checkbox\n            </div>\n        </>\n    )\n}","import {Constraint, Elem, ElemType} from \"../types\";\nimport {runJs} from \"../utils\";\nimport {constraintSystemToJson, defaultConstraintSystem} from \"hotdrink\";\n\nexport class HTMLBuilder {\n    private html: string = \"\";\n\n    constructor() {\n        this.add(\"<html>\");\n    }\n\n    add(str: string) {\n        this.html += str;\n        return this;\n    }\n\n    end() {\n        this.add(\"</html>\");\n        return this;\n    }\n\n    build() {\n        return this.html;\n    }\n\n    includeHTML(elements: Elem[], relativeX: number = 0, relativeY: number = 0) {\n        for (const {type, x, y, value, subType, width, height, id} of elements) {\n            switch (type) {\n                case ElemType.Input:\n                    this.add(`<input \n                            id=${id}\n                            type=${subType}\n                            style=\"\n                                 position:absolute;\n                                 top:${y + relativeY}px;\n                                 left:${x + relativeX}px;\n                                 width:${width}px;\n                                 height:${height}px;\n                                 border-radius: 10px;\n                                 border-style:solid;\n                                 border-width:1px;\n                                 border-color:black;\n                            \"\n                            value=\"${value}\"\n                            />`);\n                    break;\n                case ElemType.Button:\n                    this.add(`<button \n                            id=${id}\n                            style=\"\n                                 position:absolute;\n                                 top:${y + relativeY}px;\n                                 left:${x + relativeX}px;\n                                 width:${width}px;\n                                 height:${height}px;\n                                 background-color:black;\n                                 color: white;\n                                 border-radius: 10px;\n                            \"\n                         >${value}</button>`);\n                    break;\n                case ElemType.Text:\n                    this.add(`<p\n                            id=${id}\n                            style=\"\n                                 position:absolute;\n                                 top:${y + relativeY + 10}px;\n                                 left:${x + relativeX + 15}px;\n                                 width:${value.length * 12 + 30}px;\n                                 height:${height}px;\n                            \"\n                         >${value}</p>`);\n                    break;\n                case ElemType.Checkbox:\n                    this.add(`<input \n                            id=${id}\n                            type=\"checkbox\"\n                            style=\"\n                                 position:absolute;\n                                 top:${y + relativeY}px;\n                                 left:${x + relativeX}px;\n                                 width:${width}px;\n                                 height:${height}px;\n                            \"\n                            checked=\"${value}\"\n                            />`);\n                    break;\n            }\n        }\n        return this;\n    }\n\n    private includeHotDrink() {\n        this.add(\"<script type=\\\"text/javascript\\\" src=\\\"hotdrink.js\\\"></script>\");\n    }\n\n    includeJS(constraints: Constraint[], elements: any) {\n        this.includeHotDrink();\n        runJs(constraints, elements);\n\n        const json = constraintSystemToJson(defaultConstraintSystem);\n\n        this.add(\"<script>\");\n        this.add(`async function run() { `)\n        this.add(`const system = hd.constraintSystemFromJson(${JSON.stringify(json)});`)\n        this.add(`const comp = Array.from(system.allComponents())[0];`);\n\n        this.add(`function bind(value, element, type) {\n    value.value.subscribe({\n        next: val => {\n            if (val.hasOwnProperty('value')) {\n                element[type] = val.value;\n            }\n        }\n        });\n    element.addEventListener('input', () => {\n        value.value.set(element[type]);\n     });\n    }`);\n\n        for (const constraint of constraints) {\n            const unionIds = Array.from(new Set([...constraint.fromIds, ...constraint.methods.map((method) => method.toIds).flat()]));\n            for (const id of unionIds) {\n                const bindingType = elements.getElementById(id).binding;\n                this.add(`await comp.vs[\"${id}\"].currentPromise;`);\n                this.add(`system.update();`);\n                this.add(`bind(comp.vs[\"${id}\"], document.getElementById(\"${id}\"), \"${bindingType}\");`);\n            }\n            /**\n             const fromBindingType = elements.getElementById(constraints[i].fromIds[0]).binding;\n             const toBindingType = elements.getElementById(constraints[i].toIds[0]).binding;\n             this.add(`bind(document.getElementById(\"${constraints[i].fromIds[0]}\"), Array.from(system.variables())[${counter++}]._owner, ${fromBindingType});`)\n             this.add(`bind(document.getElementById(\"${constraints[i].toIds[0]}\"), Array.from(system.variables())[${counter++}]._owner, ${toBindingType});`)\n             **/\n        }\n\n        this.add(`}`)\n        this.add(`run();`);\n        this.add(\"</script>\")\n        return this;\n    }\n}\n","import {FC, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {runJs} from \"../utils\";\nimport {useConstraints} from \"../wrappers/ConstraintsWrapper\";\nimport {useElements} from \"../wrappers/ElementsWrapper\";\nimport {HTMLBuilder} from \"../exports/HTMLBuilder\";\n\nexport const HTMLView: FC = () => {\n    const constraints = useConstraints();\n    const elements = useElements()\n\n    useEffect(() => {\n       let builder = new HTMLBuilder();\n       builder.includeHTML(elements.elements, 200, 100).end();\n\n        function createMarkup(string: string) {\n            return {__html: string};\n        }\n\n        ReactDOM.render(<div\n                id=\"content\"\n                style={{height: \"100%\", width: \"100%\"}}\n                dangerouslySetInnerHTML={createMarkup(builder.build())}\n            />,\n            document.getElementById(\"index\"), () => {\n                runJs(constraints.constraints, elements);\n            });\n    }, [constraints.constraints]);\n\n    return (\n        <div id=\"index\"/>\n    );\n}","import {useState} from \"react\";\nimport {Modal} from \"@mui/material\";\nimport {HTMLView} from \"../../content/HTMLView\";\nimport {useElements} from \"../../wrappers/ElementsWrapper\";\nimport {HTMLBuilder} from \"../../exports/HTMLBuilder\";\nimport {useConstraints} from \"../../wrappers/ConstraintsWrapper\";\nimport JSZip from \"jszip\";\nimport {saveAs} from 'file-saver';\n\n\nexport const Actions = () => {\n    const elements = useElements();\n    const constraints = useConstraints();\n    const [open, setOpen] = useState(false);\n\n    async function exportToZip() {\n        const zip = new JSZip();\n        let builder = new HTMLBuilder();\n        builder.includeHTML(elements.elements).includeJS(constraints.constraints, elements).end();\n        zip.file(\"index.html\", builder.build());\n\n        let response = await fetch(\"/hotdrink.js\", {\n            method: \"GET\"\n        });\n        zip.file(\"hotdrink.js\", await response.text())\n\n        zip.generateAsync({type: 'blob'}).then(function (content) {\n            saveAs(content, 'program.zip');\n        });\n\n    }\n\n    return (\n        <>\n            <h1 className={\"font-bold text-lg\"}>Actions</h1>\n            <button\n                className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded m-1\"\n                onClick={() => setOpen(true)}\n            >Run\n            </button>\n            <button\n                className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded m-1\"\n                onClick={exportToZip}\n            >Export\n            </button>\n            <Modal\n                open={open}\n                onBackdropClick={() => setOpen(false)}\n            >\n                <div className=\"w-3/4 h-3/4 bg-gray-200 p-20 ml-auto mr-auto mt-20\">\n                    <HTMLView/>\n                </div>\n            </Modal>\n        </>\n    )\n}","import React, {FC} from \"react\";\n\ninterface Props {\n    onCancel: () => void;\n    onConfirm: () => void;\n}\n\nexport const CancelConfirm: FC<Props> = ({onCancel, onConfirm}) => {\n    return <div>\n        <button\n            className={`h-10 bg-red-600 text-white p-2 m-2 rounded`}\n            onClick={onCancel}\n        >\n            Cancel\n        </button>\n        <button\n            className={`h-10 bg-green-600 text-white p-2 m-2 rounded`}\n            onClick={onConfirm}\n        >\n            Confirm\n        </button>\n    </div>\n}","import React, {FC} from \"react\";\nimport {useConstraints} from \"../wrappers/ConstraintsWrapper\";\nimport {CancelConfirm} from \"./CancelConfirm\";\nimport {useElements} from \"../wrappers/ElementsWrapper\";\n\nexport const Constraints: FC = () => {\n    const constraints = useConstraints();\n    const elements = useElements();\n    const [name, setName] = React.useState(\"\");\n\n    function onCreate() {\n        constraints.setNewConstraint(true);\n    }\n\n    return (\n        <>\n            <h1 className=\"font-bold text-lg\">\n                Constraints\n            </h1>\n            <button\n                className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                onClick={onCreate}\n                disabled={constraints.newConstraint}\n            >Create constraint\n            </button>\n            {constraints.newConstraint &&\n                <CancelConfirm\n                    onCancel={() => constraints.cancelNewConstraint()}\n                    onConfirm={() => constraints.createConstraint(elements.elements)}\n                />\n            }\n            <div>\n                <button\n                    className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                    onClick={() => constraints.setNewMethod(true)}\n                    disabled={constraints.newMethod || !constraints.current}\n                >Create method\n                </button>\n                {constraints.newMethod &&\n                    <div>\n                        <label htmlFor={\"name\"}>Method name:</label>\n                        <input id={\"name\"} onChange={(e) => setName(e.target.value)} className={\"border\"}/>\n                        <CancelConfirm\n                            onCancel={() => constraints.cancelNewMethod()}\n                            onConfirm={() => {\n                                constraints.createMethod(name);\n                                setName(\"\");\n                            }}\n                        />\n                    </div>\n                }\n            </div>\n        </>\n    )\n}","import React from \"react\";\nimport {useAlert} from \"../wrappers/AlertWrapper\";\n\n\nexport const AlertBox = () => {\n    const alert = useAlert();\n\n    return <>\n        <div style={{\n            position: 'absolute',\n            top: 0,\n            left: \"30%\",\n            color: 'black',\n            fontSize: '20px',\n            fontWeight: 'bold',\n            zIndex: 100,\n        }}>\n            {alert.message}\n        </div>\n        <div style={{\n            position: 'absolute',\n            top: \"30px\",\n            left: \"30%\",\n            color: 'red',\n            fontSize: '18px',\n            fontWeight: 'bold',\n            zIndex: 100,\n        }}>\n            {alert.error}\n        </div>\n    </>\n}","import {FC} from \"react\";\n\nexport const RoundBox: FC = (props) => {\n    return (\n        <div className={\"bg-white py-5 px-5 rounded mb-5 shadow\"}>\n            {props.children}\n        </div>\n    );\n};","import {useConstraints} from \"../../wrappers/ConstraintsWrapper\";\nimport {upperCaseFirst} from \"../../utils\";\nimport {Constraint} from \"../../types\";\nimport React from \"react\";\nimport {RoundBox} from \"../RoundBox\";\n\n\nexport const ConstraintProperties = () => {\n    const constraints = useConstraints();\n\n    return (\n        <RoundBox>\n            {!constraints.current && <h1 className=\"font-bold\">No selected constraint</h1>}\n            {constraints.current && <>\n                <h1 className=\"font-bold\">Constraint</h1>\n                {Object.keys(constraints.current).map((key: string) => {\n                    if (key === \"fromIds\") {\n                        return <div key={key} className={\"p-1\"}>\n                            InputElements: {(constraints.current![key as keyof Constraint] as any).join(\", \")}</div>\n                    }\n                    if (key === \"methods\") {\n                        return;\n                    }\n\n                    return <div className={\"p-1\"}\n                                key={key}>{upperCaseFirst(key)}: {constraints.current![key as keyof Constraint]}</div>\n                })}\n                <button\n                    className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                    onClick={() => {\n                        constraints.deleteConstraint(constraints.current);\n                        constraints.setCurrent(undefined);\n                    }}\n                >Delete constraint\n                </button>\n            </>}\n        </RoundBox>\n    )\n}","import {lowerCaseFirst, upperCaseFirst} from \"../../utils\";\nimport {Binding, Elem, InputType} from \"../../types\";\nimport {FC} from \"react\";\nimport {useElements} from \"../../wrappers/ElementsWrapper\";\n\ninterface Props {\n    elemKey: string;\n    type: typeof InputType | typeof Binding;\n}\n\nexport const ComponentDropDown: FC<Props> = ({elemKey, type}) => {\n    const elements = useElements();\n\n    return (\n        <div key={elemKey} className=\"flex p-1\">\n            <div>{upperCaseFirst(elemKey)}: </div>\n            <select\n                className={\"m-1 rounded-md border border-gray-300 bg-white\"}\n                value={elements.current[elemKey as keyof Elem]}\n                onChange={(e) => {\n                    elements.setCurrent(\n                        elements.updateElement(elements.current, {\n                            ...elements.current,\n                            [elemKey as keyof typeof type]: e.target.value,\n                        })\n                    );\n                }}\n            >\n                {Object.keys(type).map((type, key) => {\n                    return <option key={key} value={lowerCaseFirst(type)}>{type}</option>\n                })}\n            </select>\n        </div>\n    );\n\n}","import {upperCaseFirst} from \"../../utils\";\nimport {Binding, Elem, InputType} from \"../../types\";\nimport {ComponentDropDown} from \"./ComponentDropDown\";\nimport {useElements} from \"../../wrappers/ElementsWrapper\";\nimport {useConstraints} from \"../../wrappers/ConstraintsWrapper\";\nimport React, {ChangeEvent} from \"react\";\nimport {RoundBox} from \"../RoundBox\";\n\nexport const ElementProperties = () => {\n    const elements = useElements();\n    const constraints = useConstraints();\n    const inputs = [\"value\", \"height\", \"width\", \"id\"]\n\n    function updateId(e: ChangeEvent<HTMLInputElement>, oldId: string) {\n        const exists = elements.elements.find(element => element.id === e.target.value);\n        if (exists) {\n            alert(\"Element with this id already exists\");\n            return;\n        } else {\n            updateKey(e, \"id\");\n            constraints.constraints.forEach((constraint) => {\n                if (constraint.methods.some((method) => method.toIds.includes(oldId)) || constraint.fromIds.includes(oldId)) {\n                    constraints.updateConstraint(constraint, {\n                        ...constraint,\n                        fromIds: constraint.fromIds.map(id => id === oldId ? e.target.value : id),\n                        methods: constraint.methods.map(method => {\n                            return method.toIds.includes(oldId) ? {\n                                ...method,\n                                toIds: method.toIds.map(id => id === oldId ? e.target.value : id),\n                                code: method.code.replaceAll(oldId, e.target.value),\n                            } : {\n                                ...method,\n                                code: method.code.replaceAll(oldId, e.target.value),\n                            }\n                        }),\n                    })\n                }\n            })\n        }\n    }\n\n    function updateKey(e: ChangeEvent<HTMLInputElement>, key: string, number?: boolean) {\n        elements.setCurrent(\n            elements.updateElement(elements.current, {\n                ...elements.current,\n                [key]: number ? parseInt(e.target.value) : e.target.value,\n            })\n        );\n    }\n\n    return (\n        <RoundBox>\n            {!elements.current && <h1 className=\"font-bold\">No selected element</h1>}\n            {elements.current &&\n                <>\n                    <h1 className=\"font-bold\">Element</h1>\n                    {Object.keys(elements.current).map((key: string) => {\n                        if (inputs.includes(key)) {\n                            return (\n                                <div key={key} className={\"p-1\"}>\n                                    <label\n                                        className={\"w-20\"}\n                                    >{upperCaseFirst(key)}: </label>\n                                    <input\n                                        value={elements.current[key as keyof Elem]}\n                                        onChange={(e) => {\n                                            if (key === \"id\") {\n                                                updateId(e, elements.current.id);\n                                            } else if (\"value\" === key) {\n                                                updateKey(e, key);\n                                            } else {\n                                                updateKey(e, key);\n                                            }\n                                        }}\n                                        className={\"border w-20 rounded\"}\n                                    />\n                                </div>\n                            )\n                        }\n                        if (key === \"subType\") {\n                            return (\n                                <ComponentDropDown key={key} elemKey={key} type={InputType}/>\n                            );\n                        }\n                        if (key === \"binding\") {\n                            return (\n                                <ComponentDropDown key={key} elemKey={key} type={Binding}/>\n                            );\n                        }\n                        if (key === \"type\") {\n                            return <div className={\"p-1\"}\n                                        key={key}>{\"ElementKind\"}: {elements.current[key as keyof Elem]}</div>\n                        }\n                        return <div className={\"p-1\"}\n                                    key={key}>{upperCaseFirst(key)}: {elements.current[key as keyof Elem]}</div>\n                    })}\n                    <button\n                        className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 m-1\"\n                        onClick={() => {\n                            elements.deleteElement(elements.current.id);\n                            constraints.deleteConstraintsConnected(elements.current.id);\n                            elements.setCurrent(undefined);\n                        }}\n                    >Delete element\n                    </button>\n                </>\n            }\n        </RoundBox>\n    )\n}","import React, {FC, useState} from \"react\";\nimport {useConstraints} from \"../../wrappers/ConstraintsWrapper\";\nimport {VMethod} from \"../../types\";\nimport {VisualWrapper} from \"../../content/VisualEditor/VisualWrapper\";\nimport {ConstraintEditor} from \"../../content/ConstraintEditor\";\nimport {RoundBox} from \"../RoundBox\";\n\n\nexport const MethodProperties: FC = () => {\n    const constraints = useConstraints();\n    const [open, setOpen] = useState(false);\n\n    function onClose() {\n        setOpen(false);\n    }\n\n    return (\n        <>\n            {constraints.current &&\n                <RoundBox>\n                    <>\n                        {constraints.current.methods.length === 0 ?\n                            <h1 className={\"font-bold\"}>No methods in constraints</h1> :\n                            <h1 className={\"font-bold\"}>Methods</h1>\n                        }\n                        <div>\n                            {constraints.current.methods.map((method: VMethod) => {\n                                return <div key={method.id}>\n                                    {method.id + \": \"}\n                                    <button\n                                        onClick={() => {\n                                            constraints.setCurrentMethod(method);\n                                            setOpen(true);\n                                        }}\n                                        className=\"m-1 p-1 bg-red-500 hover:bg-red-700 text-white font-bold px-1 rounded\">\n                                        Edit\n                                    </button>\n                                    <button\n                                        onClick={() => {\n                                            constraints.deleteMethod(method);\n                                        }}\n                                        className=\"m-1 p-1 bg-red-500 hover:bg-red-700 text-white font-bold px-1 rounded\">\n                                        Delete\n                                    </button>\n                                </div>\n                            })}\n                        </div>\n                    </>\n                </RoundBox>\n            }\n            <VisualWrapper>\n                <ConstraintEditor\n                    onClose={onClose}\n                    open={open}\n                />\n            </VisualWrapper>\n        </>\n    );\n}","import React from 'react';\nimport {Canvas} from './content/Canvas/Canvas';\nimport {Column} from \"./sides/Column\";\nimport {Elements} from \"./sides/Elements\";\nimport {Actions} from \"./sides/Properties/Actions\";\nimport {Constraints} from \"./sides/Constraints\";\nimport {ElementsWrapper} from \"./wrappers/ElementsWrapper\";\nimport {ConstraintsWrapper} from \"./wrappers/ConstraintsWrapper\";\nimport {EditorWrapper} from \"./wrappers/EditorWrapper\";\nimport {AlertWrapper} from \"./wrappers/AlertWrapper\";\nimport {AlertBox} from \"./content/AlertBox\";\nimport {RoundBox} from \"./sides/RoundBox\";\nimport {ConstraintProperties} from \"./sides/Properties/ConstraintProperties\";\nimport {ElementProperties} from \"./sides/Properties/ElementProperties\";\nimport {MethodProperties} from \"./sides/Properties/MethodProperties\";\n\nlet id = 0;\n\nexport function freshId() {\n    return ++id;\n}\n\n\nfunction App() {\n    return (\n        <AlertWrapper>\n            <ElementsWrapper>\n                <ConstraintsWrapper>\n                    <EditorWrapper>\n                        <div className=\"flex space-x-3 max-h-full\">\n                            <AlertBox/>\n                            <Column>\n                                <RoundBox>\n                                    <Elements/>\n                                </RoundBox>\n                                <ElementProperties/>\n                            </Column>\n                            <div className=\"flex-1\">\n                                <Canvas/>\n                            </div>\n                            <Column>\n                                <RoundBox>\n                                    <Constraints/>\n                                </RoundBox>\n                                <ConstraintProperties/>\n                                <MethodProperties/>\n                                <div className={\"absolute bottom-10\"}>\n                                    <RoundBox>\n                                        <Actions/>\n                                    </RoundBox>\n                                </div>\n                            </Column>\n                        </div>\n                    </EditorWrapper>\n                </ConstraintsWrapper>\n            </ElementsWrapper>\n        </AlertWrapper>\n    );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n    Component,\n    ConstraintSpec,\n    constraintSystemToJson,\n    defaultConstraintSystem,\n    maskNone, maskUpdate,\n    Method,\n    VariableReference,\n} from \"hotdrink\";\nimport {Constraint, VComponent, VMethod, Binding} from \"./types\";\n\nexport const idToValue = new Map();\nexport const valueToId = new Map();\n\nexport function DOMBind(element: HTMLElement | null, value: VariableReference<any> | undefined, attribute: string) {\n    if (element === null) {\n        throw Error(\"DOM Element is null\");\n    }\n    let unsubscribeHD = value?.value?.subscribe({\n        next: (val: any) => {\n            if (val.hasOwnProperty(\"value\")) {\n                // @ts-ignore\n                element[attribute] = val.value;\n            }\n        }\n    });\n\n    function setHDValue() {\n        // @ts-ignore\n        value?.value?.set(element[attribute]);\n    }\n\n    element?.addEventListener('input', setHDValue);\n    idToValue.set(element?.id, value);\n    valueToId.set(value, element?.id);\n\n    function unsubscribe() {\n        idToValue.delete(element?.id);\n        valueToId.delete(value);\n        element?.removeEventListener('input', setHDValue);\n        unsubscribeHD?.unsubscribe();\n    }\n\n    return unsubscribe;\n}\n\nexport function runJs(constraints: Constraint[], elements: any): any {\n    let index = 0;\n    const freshIndex = () => ++index;\n    try {\n        for (const constraint of constraints) {\n\n            const func = (method: VMethod) => eval(`(${constraint.fromIds.join(\", \")}) => {\n                ${method.code}\n            }`)\n\n            const unionIds = Array.from(new Set([...constraint.fromIds, ...constraint.methods.map((method) => method.toIds).flat()]));\n            const methods = constraint.methods.map((method) => {\n                return new Method(\n                    unionIds.length,\n                    constraint.fromIds.map((id) => unionIds.indexOf(id)),\n                    method.toIds.map((id) => unionIds.indexOf(id)),\n                    [...constraint.fromIds.map(() => maskNone)],\n                    func(method));\n            });\n\n            const cspec = new ConstraintSpec(methods);\n            const comp = new Component(`Component${freshIndex()}`);\n            const vars = unionIds.map((id) => {\n                return comp.emplaceVariable(id, elements.getElementById(id)?.value ?? \"\");\n            })\n            comp.emplaceConstraint(`C${freshIndex()}`, cspec, vars, false);\n            defaultConstraintSystem.addComponent(comp);\n            defaultConstraintSystem.update();\n            try {\n                for (const id of unionIds) {\n                    const bindingType = elements.getElementById(id).binding;\n                    DOMBind(document.getElementById(id), comp.vs[id], bindingType);\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        console.log(constraintSystemToJson(defaultConstraintSystem))\n    } catch (e) {\n        console.error(e);\n    }\n}\n\n/**\n * Converts the first character of a string to upper case.\n *\n * @param string - The string to convert.\n *\n * @returns The converted string.\n */\nexport function upperCaseFirst(string: string): string {\n    return string.slice(0, 1).toUpperCase() + string.slice(1);\n}\n\n/**\n * Converts the first character of a string to lower case.\n *\n * @param string - The string to convert.\n *\n * @returns The converted string.\n */\nexport function lowerCaseFirst(string: string): string {\n    return string.slice(0, 1).toLowerCase() + string.slice(1);\n}\n\n\nexport function clamp(num: number, max: number): number {\n    if (num < 0) {\n        return 0;\n    }\n    if (num > max) {\n        return max;\n    }\n    return num;\n}\n\nexport function socketYAxisPlacement(component: VComponent, index: number, length: number | undefined, includeY: boolean = false) {\n    if (length) {\n        if (length === 1) {\n            return includeY ? component.y + component.height / 2 : component.height / 2;\n        }\n        return includeY ? component.y + (component.height / (length * 2)) * index : (component.height / (length * 2)) * index;\n    }\n    return 0;\n}\n"],"sourceRoot":""}